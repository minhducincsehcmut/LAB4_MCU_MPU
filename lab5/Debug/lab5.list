
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d1c  08003d1c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003d1c  08003d1c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d1c  08003d1c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d1c  08003d1c  00013d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  08003d94  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003d94  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e325  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022cc  00000000  00000000  0002e3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00030690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  000313b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b0a  00000000  00000000  00032008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd79  00000000  00000000  0004ab12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a21  00000000  00000000  0005888b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e22ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e10  00000000  00000000  000e2300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b60 	.word	0x08003b60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003b60 	.word	0x08003b60

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fd38 	bl	8000bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f83e 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ee 	bl	8000338 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f876 	bl	800024c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f8c0 	bl	80002e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000164:	4814      	ldr	r0, [pc, #80]	; (80001b8 <main+0x6c>)
 8000166:	f001 fd63 	bl	8001c30 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800016a:	2201      	movs	r2, #1
 800016c:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000170:	4812      	ldr	r0, [pc, #72]	; (80001bc <main+0x70>)
 8000172:	f001 f8c1 	bl	80012f8 <HAL_GPIO_WritePin>
		  	  	  	  	   |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(0, task_display1, 0, 200);
 8000176:	23c8      	movs	r3, #200	; 0xc8
 8000178:	2200      	movs	r2, #0
 800017a:	4911      	ldr	r1, [pc, #68]	; (80001c0 <main+0x74>)
 800017c:	2000      	movs	r0, #0
 800017e:	f000 fa1f 	bl	80005c0 <SCH_Add_Task>
  SCH_Add_Task(1, task_display2, 2, 100);
 8000182:	2364      	movs	r3, #100	; 0x64
 8000184:	2202      	movs	r2, #2
 8000186:	490f      	ldr	r1, [pc, #60]	; (80001c4 <main+0x78>)
 8000188:	2001      	movs	r0, #1
 800018a:	f000 fa19 	bl	80005c0 <SCH_Add_Task>
  SCH_Add_Task(2, task_display3, 3, 50);
 800018e:	2332      	movs	r3, #50	; 0x32
 8000190:	2203      	movs	r2, #3
 8000192:	490d      	ldr	r1, [pc, #52]	; (80001c8 <main+0x7c>)
 8000194:	2002      	movs	r0, #2
 8000196:	f000 fa13 	bl	80005c0 <SCH_Add_Task>
  SCH_Add_Task(3, task_display4, 5, 150);
 800019a:	2396      	movs	r3, #150	; 0x96
 800019c:	2205      	movs	r2, #5
 800019e:	490b      	ldr	r1, [pc, #44]	; (80001cc <main+0x80>)
 80001a0:	2003      	movs	r0, #3
 80001a2:	f000 fa0d 	bl	80005c0 <SCH_Add_Task>
  SCH_Add_Task(4, task_display5, 7, 250);
 80001a6:	23fa      	movs	r3, #250	; 0xfa
 80001a8:	2207      	movs	r2, #7
 80001aa:	4909      	ldr	r1, [pc, #36]	; (80001d0 <main+0x84>)
 80001ac:	2004      	movs	r0, #4
 80001ae:	f000 fa07 	bl	80005c0 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	SCH_Dispatch();
 80001b2:	f000 fadd 	bl	8000770 <SCH_Dispatch>
 80001b6:	e7fc      	b.n	80001b2 <main+0x66>
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	40010800 	.word	0x40010800
 80001c0:	08000b0d 	.word	0x08000b0d
 80001c4:	08000b21 	.word	0x08000b21
 80001c8:	08000b35 	.word	0x08000b35
 80001cc:	08000b49 	.word	0x08000b49
 80001d0:	08000b61 	.word	0x08000b61

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b090      	sub	sp, #64	; 0x40
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	2228      	movs	r2, #40	; 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fcde 	bl	8002ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]
 80001f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f6:	2302      	movs	r3, #2
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fa:	2301      	movs	r3, #1
 80001fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001fe:	2310      	movs	r3, #16
 8000200:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000202:	2300      	movs	r3, #0
 8000204:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000206:	f107 0318 	add.w	r3, r7, #24
 800020a:	4618      	mov	r0, r3
 800020c:	f001 f8a6 	bl	800135c <HAL_RCC_OscConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000216:	f000 f8d9 	bl	80003cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021a:	230f      	movs	r3, #15
 800021c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800021e:	2300      	movs	r3, #0
 8000220:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f001 fb12 	bl	800185c <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800023e:	f000 f8c5 	bl	80003cc <Error_Handler>
  }
}
 8000242:	bf00      	nop
 8000244:	3740      	adds	r7, #64	; 0x40
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b086      	sub	sp, #24
 8000250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000252:	f107 0308 	add.w	r3, r7, #8
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000260:	463b      	mov	r3, r7
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <MX_TIM2_Init+0x94>)
 800026a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800026e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <MX_TIM2_Init+0x94>)
 8000272:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000276:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000278:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <MX_TIM2_Init+0x94>)
 800027a:	2200      	movs	r2, #0
 800027c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800027e:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <MX_TIM2_Init+0x94>)
 8000280:	2209      	movs	r2, #9
 8000282:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000284:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <MX_TIM2_Init+0x94>)
 8000286:	2200      	movs	r2, #0
 8000288:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_TIM2_Init+0x94>)
 800028c:	2200      	movs	r2, #0
 800028e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000290:	4813      	ldr	r0, [pc, #76]	; (80002e0 <MX_TIM2_Init+0x94>)
 8000292:	f001 fc7d 	bl	8001b90 <HAL_TIM_Base_Init>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800029c:	f000 f896 	bl	80003cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002a6:	f107 0308 	add.w	r3, r7, #8
 80002aa:	4619      	mov	r1, r3
 80002ac:	480c      	ldr	r0, [pc, #48]	; (80002e0 <MX_TIM2_Init+0x94>)
 80002ae:	f001 fe13 	bl	8001ed8 <HAL_TIM_ConfigClockSource>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002b8:	f000 f888 	bl	80003cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002bc:	2300      	movs	r3, #0
 80002be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002c0:	2300      	movs	r3, #0
 80002c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002c4:	463b      	mov	r3, r7
 80002c6:	4619      	mov	r1, r3
 80002c8:	4805      	ldr	r0, [pc, #20]	; (80002e0 <MX_TIM2_Init+0x94>)
 80002ca:	f001 ffdb 	bl	8002284 <HAL_TIMEx_MasterConfigSynchronization>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002d4:	f000 f87a 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002d8:	bf00      	nop
 80002da:	3718      	adds	r7, #24
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	200000f0 	.word	0x200000f0

080002e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002e8:	4b11      	ldr	r3, [pc, #68]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 80002ea:	4a12      	ldr	r2, [pc, #72]	; (8000334 <MX_USART2_UART_Init+0x50>)
 80002ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80002ee:	4b10      	ldr	r3, [pc, #64]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 80002f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002f6:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 800030a:	220c      	movs	r2, #12
 800030c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 8000316:	2200      	movs	r2, #0
 8000318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 800031c:	f002 f81c 	bl	8002358 <HAL_UART_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000326:	f000 f851 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	20000138 	.word	0x20000138
 8000334:	40004400 	.word	0x40004400

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	f107 0308 	add.w	r3, r7, #8
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <MX_GPIO_Init+0x78>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a17      	ldr	r2, [pc, #92]	; (80003b0 <MX_GPIO_Init+0x78>)
 8000352:	f043 0310 	orr.w	r3, r3, #16
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <MX_GPIO_Init+0x78>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0310 	and.w	r3, r3, #16
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <MX_GPIO_Init+0x78>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a11      	ldr	r2, [pc, #68]	; (80003b0 <MX_GPIO_Init+0x78>)
 800036a:	f043 0304 	orr.w	r3, r3, #4
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <MX_GPIO_Init+0x78>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0304 	and.w	r3, r3, #4
 8000378:	603b      	str	r3, [r7, #0]
 800037a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000382:	480c      	ldr	r0, [pc, #48]	; (80003b4 <MX_GPIO_Init+0x7c>)
 8000384:	f000 ffb8 	bl	80012f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000388:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800038c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038e:	2301      	movs	r3, #1
 8000390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000396:	2302      	movs	r3, #2
 8000398:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039a:	f107 0308 	add.w	r3, r7, #8
 800039e:	4619      	mov	r1, r3
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <MX_GPIO_Init+0x7c>)
 80003a2:	f000 fe2f 	bl	8001004 <HAL_GPIO_Init>

}
 80003a6:	bf00      	nop
 80003a8:	3718      	adds	r7, #24
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000
 80003b4:	40010800 	.word	0x40010800

080003b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80003c0:	f000 f924 	bl	800060c <SCH_Update>
}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d0:	b672      	cpsid	i
}
 80003d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <Error_Handler+0x8>
	...

080003d8 <taskList_display>:
#include "scheduler.h"
#include <stdio.h>

uint8_t ERROR_CODE = 0;

void taskList_display() {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
	printf("Number of tasks = %d\r\n", SCH_TASK_LIST.numofTask);
 80003de:	4b18      	ldr	r3, [pc, #96]	; (8000440 <taskList_display+0x68>)
 80003e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80003e2:	4619      	mov	r1, r3
 80003e4:	4817      	ldr	r0, [pc, #92]	; (8000444 <taskList_display+0x6c>)
 80003e6:	f002 fbe5 	bl	8002bb4 <iprintf>
	if (SCH_TASK_LIST.numofTask == 0) {
 80003ea:	4b15      	ldr	r3, [pc, #84]	; (8000440 <taskList_display+0x68>)
 80003ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d103      	bne.n	80003fa <taskList_display+0x22>
		printf("No task to display\r\n");
 80003f2:	4815      	ldr	r0, [pc, #84]	; (8000448 <taskList_display+0x70>)
 80003f4:	f002 fc64 	bl	8002cc0 <puts>
		return;
 80003f8:	e01f      	b.n	800043a <taskList_display+0x62>
	}
	for (int i = 0; i < SCH_TASK_LIST.numofTask; i++) {
 80003fa:	2300      	movs	r3, #0
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	e017      	b.n	8000430 <taskList_display+0x58>
		printf("--index = %d: ", i);
 8000400:	6879      	ldr	r1, [r7, #4]
 8000402:	4812      	ldr	r0, [pc, #72]	; (800044c <taskList_display+0x74>)
 8000404:	f002 fbd6 	bl	8002bb4 <iprintf>
		printf("TaskID = %d - Delay = %lu\r\n", SCH_TASK_LIST.TASK_QUEUE[i].TaskID, SCH_TASK_LIST.TASK_QUEUE[i].Delay);
 8000408:	4a0d      	ldr	r2, [pc, #52]	; (8000440 <taskList_display+0x68>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	011b      	lsls	r3, r3, #4
 800040e:	4413      	add	r3, r2
 8000410:	330d      	adds	r3, #13
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	4619      	mov	r1, r3
 8000416:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <taskList_display+0x68>)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	011b      	lsls	r3, r3, #4
 800041c:	4413      	add	r3, r2
 800041e:	3304      	adds	r3, #4
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	461a      	mov	r2, r3
 8000424:	480a      	ldr	r0, [pc, #40]	; (8000450 <taskList_display+0x78>)
 8000426:	f002 fbc5 	bl	8002bb4 <iprintf>
	for (int i = 0; i < SCH_TASK_LIST.numofTask; i++) {
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	3301      	adds	r3, #1
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <taskList_display+0x68>)
 8000432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	429a      	cmp	r2, r3
 8000438:	dbe2      	blt.n	8000400 <taskList_display+0x28>
	}
}
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	2000009c 	.word	0x2000009c
 8000444:	08003b78 	.word	0x08003b78
 8000448:	08003b90 	.word	0x08003b90
 800044c:	08003ba4 	.word	0x08003ba4
 8000450:	08003bb4 	.word	0x08003bb4

08000454 <insert_to_list>:
void insert_to_list(sTask task) {
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b089      	sub	sp, #36	; 0x24
 8000458:	af00      	add	r7, sp, #0
 800045a:	463c      	mov	r4, r7
 800045c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// NO TASK IN LIST
	if (SCH_TASK_LIST.numofTask == 0) {
 8000460:	4b55      	ldr	r3, [pc, #340]	; (80005b8 <insert_to_list+0x164>)
 8000462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000464:	2b00      	cmp	r3, #0
 8000466:	d10b      	bne.n	8000480 <insert_to_list+0x2c>
		SCH_TASK_LIST.TASK_QUEUE[0] = task;
 8000468:	4b53      	ldr	r3, [pc, #332]	; (80005b8 <insert_to_list+0x164>)
 800046a:	461c      	mov	r4, r3
 800046c:	463b      	mov	r3, r7
 800046e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		SCH_TASK_LIST.numofTask += 1;
 8000474:	4b50      	ldr	r3, [pc, #320]	; (80005b8 <insert_to_list+0x164>)
 8000476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000478:	3301      	adds	r3, #1
 800047a:	4a4f      	ldr	r2, [pc, #316]	; (80005b8 <insert_to_list+0x164>)
 800047c:	6513      	str	r3, [r2, #80]	; 0x50
		return;
 800047e:	e098      	b.n	80005b2 <insert_to_list+0x15e>
	} else {
	// 1+ TASK(S) IN LIST
		int pos = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
		int prev = SCH_TASK_LIST.TASK_QUEUE[0].Delay;
 8000484:	4b4c      	ldr	r3, [pc, #304]	; (80005b8 <insert_to_list+0x164>)
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	61bb      	str	r3, [r7, #24]
		int sum = SCH_TASK_LIST.TASK_QUEUE[0].Delay;
 800048a:	4b4b      	ldr	r3, [pc, #300]	; (80005b8 <insert_to_list+0x164>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	617b      	str	r3, [r7, #20]
		// loop until find the right position
		while (pos < SCH_TASK_LIST.numofTask && task.Delay > sum) {
 8000490:	e012      	b.n	80004b8 <insert_to_list+0x64>
			pos += 1;
 8000492:	69fb      	ldr	r3, [r7, #28]
 8000494:	3301      	adds	r3, #1
 8000496:	61fb      	str	r3, [r7, #28]
			if (pos < SCH_TASK_LIST.numofTask) {
 8000498:	4b47      	ldr	r3, [pc, #284]	; (80005b8 <insert_to_list+0x164>)
 800049a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800049c:	69fa      	ldr	r2, [r7, #28]
 800049e:	429a      	cmp	r2, r3
 80004a0:	da0a      	bge.n	80004b8 <insert_to_list+0x64>
				prev = sum;
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	61bb      	str	r3, [r7, #24]
				sum += SCH_TASK_LIST.TASK_QUEUE[pos].Delay;
 80004a6:	4a44      	ldr	r2, [pc, #272]	; (80005b8 <insert_to_list+0x164>)
 80004a8:	69fb      	ldr	r3, [r7, #28]
 80004aa:	011b      	lsls	r3, r3, #4
 80004ac:	4413      	add	r3, r2
 80004ae:	3304      	adds	r3, #4
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	4413      	add	r3, r2
 80004b6:	617b      	str	r3, [r7, #20]
		while (pos < SCH_TASK_LIST.numofTask && task.Delay > sum) {
 80004b8:	4b3f      	ldr	r3, [pc, #252]	; (80005b8 <insert_to_list+0x164>)
 80004ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80004bc:	69fa      	ldr	r2, [r7, #28]
 80004be:	429a      	cmp	r2, r3
 80004c0:	da03      	bge.n	80004ca <insert_to_list+0x76>
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d8e3      	bhi.n	8000492 <insert_to_list+0x3e>
			}
		}
		if (pos == SCH_TASK_LIST.numofTask) {
 80004ca:	4b3b      	ldr	r3, [pc, #236]	; (80005b8 <insert_to_list+0x164>)
 80004cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80004ce:	69fa      	ldr	r2, [r7, #28]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d112      	bne.n	80004fa <insert_to_list+0xa6>
			// ADD TO REAR -> update delay of new task only
			task.Delay -= sum;
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	1ad3      	subs	r3, r2, r3
 80004da:	607b      	str	r3, [r7, #4]
			SCH_TASK_LIST.TASK_QUEUE[pos] = task;
 80004dc:	4a36      	ldr	r2, [pc, #216]	; (80005b8 <insert_to_list+0x164>)
 80004de:	69fb      	ldr	r3, [r7, #28]
 80004e0:	011b      	lsls	r3, r3, #4
 80004e2:	4413      	add	r3, r2
 80004e4:	461c      	mov	r4, r3
 80004e6:	463b      	mov	r3, r7
 80004e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			SCH_TASK_LIST.numofTask += 1;
 80004ee:	4b32      	ldr	r3, [pc, #200]	; (80005b8 <insert_to_list+0x164>)
 80004f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80004f2:	3301      	adds	r3, #1
 80004f4:	4a30      	ldr	r2, [pc, #192]	; (80005b8 <insert_to_list+0x164>)
 80004f6:	6513      	str	r3, [r2, #80]	; 0x50
			return;
 80004f8:	e05b      	b.n	80005b2 <insert_to_list+0x15e>
		}
		else {
			// shift elements
			for (int i = SCH_TASK_LIST.numofTask; i > pos; i--) {
 80004fa:	4b2f      	ldr	r3, [pc, #188]	; (80005b8 <insert_to_list+0x164>)
 80004fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	e00f      	b.n	8000522 <insert_to_list+0xce>
				SCH_TASK_LIST.TASK_QUEUE[i] = SCH_TASK_LIST.TASK_QUEUE[i - 1];
 8000502:	693b      	ldr	r3, [r7, #16]
 8000504:	3b01      	subs	r3, #1
 8000506:	492c      	ldr	r1, [pc, #176]	; (80005b8 <insert_to_list+0x164>)
 8000508:	693a      	ldr	r2, [r7, #16]
 800050a:	0112      	lsls	r2, r2, #4
 800050c:	4411      	add	r1, r2
 800050e:	4a2a      	ldr	r2, [pc, #168]	; (80005b8 <insert_to_list+0x164>)
 8000510:	011b      	lsls	r3, r3, #4
 8000512:	4413      	add	r3, r2
 8000514:	460c      	mov	r4, r1
 8000516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			for (int i = SCH_TASK_LIST.numofTask; i > pos; i--) {
 800051c:	693b      	ldr	r3, [r7, #16]
 800051e:	3b01      	subs	r3, #1
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	693a      	ldr	r2, [r7, #16]
 8000524:	69fb      	ldr	r3, [r7, #28]
 8000526:	429a      	cmp	r2, r3
 8000528:	dceb      	bgt.n	8000502 <insert_to_list+0xae>
			}
			if (pos == 0) {
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10d      	bne.n	800054c <insert_to_list+0xf8>
				// ADD TO FRONT
				SCH_TASK_LIST.TASK_QUEUE[pos] = task;
 8000530:	4a21      	ldr	r2, [pc, #132]	; (80005b8 <insert_to_list+0x164>)
 8000532:	69fb      	ldr	r3, [r7, #28]
 8000534:	011b      	lsls	r3, r3, #4
 8000536:	4413      	add	r3, r2
 8000538:	461c      	mov	r4, r3
 800053a:	463b      	mov	r3, r7
 800053c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800053e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				sum = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
				prev = task.Delay;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	61bb      	str	r3, [r7, #24]
 800054a:	e012      	b.n	8000572 <insert_to_list+0x11e>
			} else {
				// ADD TO MIDDLE
				task.Delay -= prev;
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	69bb      	ldr	r3, [r7, #24]
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	607b      	str	r3, [r7, #4]
				sum = prev;
 8000554:	69bb      	ldr	r3, [r7, #24]
 8000556:	617b      	str	r3, [r7, #20]
				prev += task.Delay;
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	69bb      	ldr	r3, [r7, #24]
 800055c:	4413      	add	r3, r2
 800055e:	61bb      	str	r3, [r7, #24]
				SCH_TASK_LIST.TASK_QUEUE[pos] = task;
 8000560:	4a15      	ldr	r2, [pc, #84]	; (80005b8 <insert_to_list+0x164>)
 8000562:	69fb      	ldr	r3, [r7, #28]
 8000564:	011b      	lsls	r3, r3, #4
 8000566:	4413      	add	r3, r2
 8000568:	461c      	mov	r4, r3
 800056a:	463b      	mov	r3, r7
 800056c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800056e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			}
			// update delay of [pos + 1]
			sum += SCH_TASK_LIST.TASK_QUEUE[pos + 1].Delay;
 8000572:	69fb      	ldr	r3, [r7, #28]
 8000574:	3301      	adds	r3, #1
 8000576:	4a10      	ldr	r2, [pc, #64]	; (80005b8 <insert_to_list+0x164>)
 8000578:	011b      	lsls	r3, r3, #4
 800057a:	4413      	add	r3, r2
 800057c:	3304      	adds	r3, #4
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	4413      	add	r3, r2
 8000584:	617b      	str	r3, [r7, #20]
			SCH_TASK_LIST.TASK_QUEUE[pos + 1].Delay = sum - prev;
 8000586:	697a      	ldr	r2, [r7, #20]
 8000588:	69bb      	ldr	r3, [r7, #24]
 800058a:	1ad2      	subs	r2, r2, r3
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	3301      	adds	r3, #1
 8000590:	4611      	mov	r1, r2
 8000592:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <insert_to_list+0x164>)
 8000594:	011b      	lsls	r3, r3, #4
 8000596:	4413      	add	r3, r2
 8000598:	3304      	adds	r3, #4
 800059a:	6019      	str	r1, [r3, #0]

			SCH_TASK_LIST.numofTask += 1;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <insert_to_list+0x164>)
 800059e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80005a0:	3301      	adds	r3, #1
 80005a2:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <insert_to_list+0x164>)
 80005a4:	6513      	str	r3, [r2, #80]	; 0x50
			printf("Insert at pos %d\r\n", pos);
 80005a6:	69f9      	ldr	r1, [r7, #28]
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <insert_to_list+0x168>)
 80005aa:	f002 fb03 	bl	8002bb4 <iprintf>
		}
	}
	taskList_display();
 80005ae:	f7ff ff13 	bl	80003d8 <taskList_display>
}
 80005b2:	3724      	adds	r7, #36	; 0x24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	2000009c 	.word	0x2000009c
 80005bc:	08003bd0 	.word	0x08003bd0

080005c0 <SCH_Add_Task>:
void SCH_Add_Task(uint8_t id, void (*pFunction)(), uint32_t delay, uint32_t period) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60b9      	str	r1, [r7, #8]
 80005c8:	607a      	str	r2, [r7, #4]
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	4603      	mov	r3, r0
 80005ce:	73fb      	strb	r3, [r7, #15]
	//printf("ADD TASK\r\n");
	if (SCH_TASK_LIST.numofTask >= SCH_MAX_TASKS) {
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <SCH_Add_Task+0x44>)
 80005d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	dd03      	ble.n	80005e0 <SCH_Add_Task+0x20>
		ERROR_CODE = 1;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <SCH_Add_Task+0x48>)
 80005da:	2201      	movs	r2, #1
 80005dc:	701a      	strb	r2, [r3, #0]
 80005de:	e00e      	b.n	80005fe <SCH_Add_Task+0x3e>
		return;
	}
	sTask temp;
	temp.pTask = pFunction;
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	613b      	str	r3, [r7, #16]
	temp.Delay = delay;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	617b      	str	r3, [r7, #20]
	temp.Period = period;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	61bb      	str	r3, [r7, #24]
	temp.RunMe = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	773b      	strb	r3, [r7, #28]
	temp.TaskID = id;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	777b      	strb	r3, [r7, #29]
	insert_to_list(temp);
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005fa:	f7ff ff2b 	bl	8000454 <insert_to_list>
}
 80005fe:	3720      	adds	r7, #32
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2000009c 	.word	0x2000009c
 8000608:	2000008c 	.word	0x2000008c

0800060c <SCH_Update>:
void SCH_Update() {
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
	if (!SCH_TASK_LIST.TASK_QUEUE[0].pTask) {
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <SCH_Update+0x4c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d103      	bne.n	8000620 <SCH_Update+0x14>
		ERROR_CODE = 3;
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <SCH_Update+0x50>)
 800061a:	2203      	movs	r2, #3
 800061c:	701a      	strb	r2, [r3, #0]
				SCH_TASK_LIST.TASK_QUEUE[0].Delay = SCH_TASK_LIST.TASK_QUEUE[0].Period;
			}
		}
		else SCH_TASK_LIST.TASK_QUEUE[0].Delay -= 1;
	}
}
 800061e:	e017      	b.n	8000650 <SCH_Update+0x44>
		if (SCH_TASK_LIST.TASK_QUEUE[0].Delay == 0) {
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <SCH_Update+0x4c>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d10e      	bne.n	8000646 <SCH_Update+0x3a>
			SCH_TASK_LIST.TASK_QUEUE[0].RunMe += 1;
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <SCH_Update+0x4c>)
 800062a:	7b1b      	ldrb	r3, [r3, #12]
 800062c:	3301      	adds	r3, #1
 800062e:	b2da      	uxtb	r2, r3
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <SCH_Update+0x4c>)
 8000632:	731a      	strb	r2, [r3, #12]
			if (SCH_TASK_LIST.TASK_QUEUE[0].Period) {
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <SCH_Update+0x4c>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d009      	beq.n	8000650 <SCH_Update+0x44>
				SCH_TASK_LIST.TASK_QUEUE[0].Delay = SCH_TASK_LIST.TASK_QUEUE[0].Period;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <SCH_Update+0x4c>)
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	4a05      	ldr	r2, [pc, #20]	; (8000658 <SCH_Update+0x4c>)
 8000642:	6053      	str	r3, [r2, #4]
}
 8000644:	e004      	b.n	8000650 <SCH_Update+0x44>
		else SCH_TASK_LIST.TASK_QUEUE[0].Delay -= 1;
 8000646:	4b04      	ldr	r3, [pc, #16]	; (8000658 <SCH_Update+0x4c>)
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	3b01      	subs	r3, #1
 800064c:	4a02      	ldr	r2, [pc, #8]	; (8000658 <SCH_Update+0x4c>)
 800064e:	6053      	str	r3, [r2, #4]
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	2000009c 	.word	0x2000009c
 800065c:	2000008c 	.word	0x2000008c

08000660 <SCH_Delete>:
void SCH_Delete() {
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b087      	sub	sp, #28
 8000664:	af00      	add	r7, sp, #0
	int index = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
	int add_back_flag = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
	sTask temp;
	if (SCH_TASK_LIST.TASK_QUEUE[index].Period) {
 800066e:	4a2a      	ldr	r2, [pc, #168]	; (8000718 <SCH_Delete+0xb8>)
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	011b      	lsls	r3, r3, #4
 8000674:	4413      	add	r3, r2
 8000676:	3308      	adds	r3, #8
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d01a      	beq.n	80006b4 <SCH_Delete+0x54>
		add_back_flag = 1;
 800067e:	2301      	movs	r3, #1
 8000680:	613b      	str	r3, [r7, #16]
		temp = SCH_TASK_LIST.TASK_QUEUE[index];
 8000682:	4a25      	ldr	r2, [pc, #148]	; (8000718 <SCH_Delete+0xb8>)
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	011b      	lsls	r3, r3, #4
 8000688:	4413      	add	r3, r2
 800068a:	463c      	mov	r4, r7
 800068c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800068e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
	for (; index < (SCH_TASK_LIST.numofTask - 1); index++) {
 8000692:	e00f      	b.n	80006b4 <SCH_Delete+0x54>
		SCH_TASK_LIST.TASK_QUEUE[index] = SCH_TASK_LIST.TASK_QUEUE[index + 1];
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	3301      	adds	r3, #1
 8000698:	491f      	ldr	r1, [pc, #124]	; (8000718 <SCH_Delete+0xb8>)
 800069a:	697a      	ldr	r2, [r7, #20]
 800069c:	0112      	lsls	r2, r2, #4
 800069e:	4411      	add	r1, r2
 80006a0:	4a1d      	ldr	r2, [pc, #116]	; (8000718 <SCH_Delete+0xb8>)
 80006a2:	011b      	lsls	r3, r3, #4
 80006a4:	4413      	add	r3, r2
 80006a6:	460c      	mov	r4, r1
 80006a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (; index < (SCH_TASK_LIST.numofTask - 1); index++) {
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	3301      	adds	r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <SCH_Delete+0xb8>)
 80006b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80006b8:	3b01      	subs	r3, #1
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbe9      	blt.n	8000694 <SCH_Delete+0x34>
	}
	SCH_TASK_LIST.TASK_QUEUE[index].pTask = 0x0000;
 80006c0:	4a15      	ldr	r2, [pc, #84]	; (8000718 <SCH_Delete+0xb8>)
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	4413      	add	r3, r2
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
	SCH_TASK_LIST.TASK_QUEUE[index].Delay = 0;
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <SCH_Delete+0xb8>)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	4413      	add	r3, r2
 80006d4:	3304      	adds	r3, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
	SCH_TASK_LIST.TASK_QUEUE[index].Period = 0;
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <SCH_Delete+0xb8>)
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	011b      	lsls	r3, r3, #4
 80006e0:	4413      	add	r3, r2
 80006e2:	3308      	adds	r3, #8
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
	SCH_TASK_LIST.TASK_QUEUE[index].RunMe = 0;
 80006e8:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <SCH_Delete+0xb8>)
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	011b      	lsls	r3, r3, #4
 80006ee:	4413      	add	r3, r2
 80006f0:	330c      	adds	r3, #12
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
	SCH_TASK_LIST.numofTask -= 1;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <SCH_Delete+0xb8>)
 80006f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80006fa:	3b01      	subs	r3, #1
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <SCH_Delete+0xb8>)
 80006fe:	6513      	str	r3, [r2, #80]	; 0x50
	if (add_back_flag == 1) {
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d103      	bne.n	800070e <SCH_Delete+0xae>
		insert_to_list(temp);
 8000706:	463b      	mov	r3, r7
 8000708:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800070a:	f7ff fea3 	bl	8000454 <insert_to_list>
	}
}
 800070e:	bf00      	nop
 8000710:	371c      	adds	r7, #28
 8000712:	46bd      	mov	sp, r7
 8000714:	bd90      	pop	{r4, r7, pc}
 8000716:	bf00      	nop
 8000718:	2000009c 	.word	0x2000009c

0800071c <SCH_Report>:
void SCH_Report() {
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	if (ERROR_CODE != 0) {
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <SCH_Report+0x44>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d016      	beq.n	8000756 <SCH_Report+0x3a>
		switch(ERROR_CODE) {
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <SCH_Report+0x44>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b03      	cmp	r3, #3
 800072e:	d00e      	beq.n	800074e <SCH_Report+0x32>
 8000730:	2b03      	cmp	r3, #3
 8000732:	dc13      	bgt.n	800075c <SCH_Report+0x40>
 8000734:	2b01      	cmp	r3, #1
 8000736:	d002      	beq.n	800073e <SCH_Report+0x22>
 8000738:	2b02      	cmp	r3, #2
 800073a:	d004      	beq.n	8000746 <SCH_Report+0x2a>
			break;
		case 3:
			printf("ERROR: NO TASK AVAILABLE!\r\n");
		}
	} else taskList_display();
}
 800073c:	e00e      	b.n	800075c <SCH_Report+0x40>
			printf("ERROR: TOO MANY TASKS!\r\n");
 800073e:	4809      	ldr	r0, [pc, #36]	; (8000764 <SCH_Report+0x48>)
 8000740:	f002 fabe 	bl	8002cc0 <puts>
			break;
 8000744:	e00a      	b.n	800075c <SCH_Report+0x40>
			printf("ERROR: CANNOT DELETE TASK!\r\n");
 8000746:	4808      	ldr	r0, [pc, #32]	; (8000768 <SCH_Report+0x4c>)
 8000748:	f002 faba 	bl	8002cc0 <puts>
			break;
 800074c:	e006      	b.n	800075c <SCH_Report+0x40>
			printf("ERROR: NO TASK AVAILABLE!\r\n");
 800074e:	4807      	ldr	r0, [pc, #28]	; (800076c <SCH_Report+0x50>)
 8000750:	f002 fab6 	bl	8002cc0 <puts>
}
 8000754:	e002      	b.n	800075c <SCH_Report+0x40>
	} else taskList_display();
 8000756:	f7ff fe3f 	bl	80003d8 <taskList_display>
}
 800075a:	e7ff      	b.n	800075c <SCH_Report+0x40>
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000008c 	.word	0x2000008c
 8000764:	08003be4 	.word	0x08003be4
 8000768:	08003bfc 	.word	0x08003bfc
 800076c:	08003c18 	.word	0x08003c18

08000770 <SCH_Dispatch>:
void SCH_Dispatch() {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
	uint8_t index = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	71fb      	strb	r3, [r7, #7]
	for (; index < SCH_MAX_TASKS; index++) {
 800077a:	e02f      	b.n	80007dc <SCH_Dispatch+0x6c>
		if (SCH_TASK_LIST.TASK_QUEUE[index].RunMe > 0) {
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <SCH_Dispatch+0x80>)
 8000780:	011b      	lsls	r3, r3, #4
 8000782:	4413      	add	r3, r2
 8000784:	330c      	adds	r3, #12
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d024      	beq.n	80007d6 <SCH_Dispatch+0x66>
			printf("\r\n> Run task (ID %d) at index = %d\r\n", SCH_TASK_LIST.TASK_QUEUE[index].TaskID, index);
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <SCH_Dispatch+0x80>)
 8000790:	011b      	lsls	r3, r3, #4
 8000792:	4413      	add	r3, r2
 8000794:	330d      	adds	r3, #13
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	461a      	mov	r2, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <SCH_Dispatch+0x84>)
 80007a0:	f002 fa08 	bl	8002bb4 <iprintf>
			(*SCH_TASK_LIST.TASK_QUEUE[index].pTask)();
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <SCH_Dispatch+0x80>)
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	4413      	add	r3, r2
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4798      	blx	r3
			SCH_TASK_LIST.TASK_QUEUE[index].RunMe -= 1;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <SCH_Dispatch+0x80>)
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	4413      	add	r3, r2
 80007b8:	330c      	adds	r3, #12
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	3a01      	subs	r2, #1
 80007c0:	b2d1      	uxtb	r1, r2
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <SCH_Dispatch+0x80>)
 80007c4:	011b      	lsls	r3, r3, #4
 80007c6:	4413      	add	r3, r2
 80007c8:	330c      	adds	r3, #12
 80007ca:	460a      	mov	r2, r1
 80007cc:	701a      	strb	r2, [r3, #0]
			SCH_Delete(index);
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff45 	bl	8000660 <SCH_Delete>
	for (; index < SCH_MAX_TASKS; index++) {
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	3301      	adds	r3, #1
 80007da:	71fb      	strb	r3, [r7, #7]
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b04      	cmp	r3, #4
 80007e0:	d9cc      	bls.n	800077c <SCH_Dispatch+0xc>
		}
	}
	SCH_Report();
 80007e2:	f7ff ff9b 	bl	800071c <SCH_Report>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000009c 	.word	0x2000009c
 80007f4:	08003c34 	.word	0x08003c34

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_MspInit+0x5c>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <HAL_MspInit+0x5c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6193      	str	r3, [r2, #24]
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_MspInit+0x5c>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_MspInit+0x5c>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <HAL_MspInit+0x5c>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	61d3      	str	r3, [r2, #28]
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_MspInit+0x5c>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_MspInit+0x60>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <HAL_MspInit+0x60>)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	40021000 	.word	0x40021000
 8000858:	40010000 	.word	0x40010000

0800085c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800086c:	d113      	bne.n	8000896 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_TIM_Base_MspInit+0x44>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <HAL_TIM_Base_MspInit+0x44>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_TIM_Base_MspInit+0x44>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	201c      	movs	r0, #28
 800088c:	f000 fad3 	bl	8000e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000890:	201c      	movs	r0, #28
 8000892:	f000 faec 	bl	8000e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a1f      	ldr	r2, [pc, #124]	; (800093c <HAL_UART_MspInit+0x98>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d137      	bne.n	8000934 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c4:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <HAL_UART_MspInit+0x9c>)
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <HAL_UART_MspInit+0x9c>)
 80008ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ce:	61d3      	str	r3, [r2, #28]
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <HAL_UART_MspInit+0x9c>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <HAL_UART_MspInit+0x9c>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a17      	ldr	r2, [pc, #92]	; (8000940 <HAL_UART_MspInit+0x9c>)
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_UART_MspInit+0x9c>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008f4:	2304      	movs	r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4619      	mov	r1, r3
 8000906:	480f      	ldr	r0, [pc, #60]	; (8000944 <HAL_UART_MspInit+0xa0>)
 8000908:	f000 fb7c 	bl	8001004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800090c:	2308      	movs	r3, #8
 800090e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4619      	mov	r1, r3
 800091e:	4809      	ldr	r0, [pc, #36]	; (8000944 <HAL_UART_MspInit+0xa0>)
 8000920:	f000 fb70 	bl	8001004 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2026      	movs	r0, #38	; 0x26
 800092a:	f000 fa84 	bl	8000e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800092e:	2026      	movs	r0, #38	; 0x26
 8000930:	f000 fa9d 	bl	8000e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000934:	bf00      	nop
 8000936:	3720      	adds	r7, #32
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40004400 	.word	0x40004400
 8000940:	40021000 	.word	0x40021000
 8000944:	40010800 	.word	0x40010800

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr

08000972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr

0800098a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098e:	f000 f95f 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <TIM2_IRQHandler+0x10>)
 800099e:	f001 f993 	bl	8001cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000f0 	.word	0x200000f0

080009ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <USART2_IRQHandler+0x10>)
 80009b2:	f001 fd1f 	bl	80023f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000138 	.word	0x20000138

080009c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	e00a      	b.n	80009e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009d2:	f3af 8000 	nop.w
 80009d6:	4601      	mov	r1, r0
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	60ba      	str	r2, [r7, #8]
 80009de:	b2ca      	uxtb	r2, r1
 80009e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbf0      	blt.n	80009d2 <_read+0x12>
	}

return len;
 80009f0:	687b      	ldr	r3, [r7, #4]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	e009      	b.n	8000a20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	60ba      	str	r2, [r7, #8]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbf1      	blt.n	8000a0c <_write+0x12>
	}
	return len;
 8000a28:	687b      	ldr	r3, [r7, #4]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_close>:

int _close(int file)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	return -1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a58:	605a      	str	r2, [r3, #4]
	return 0;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <_isatty>:

int _isatty(int file)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b085      	sub	sp, #20
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
	return 0;
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
	...

08000a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a9c:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <_sbrk+0x5c>)
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <_sbrk+0x60>)
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <_sbrk+0x64>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <_sbrk+0x68>)
 8000ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d207      	bcs.n	8000ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac4:	f002 f844 	bl	8002b50 <__errno>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	220c      	movs	r2, #12
 8000acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	e009      	b.n	8000ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <_sbrk+0x64>)
 8000ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20002800 	.word	0x20002800
 8000af4:	00000400 	.word	0x00000400
 8000af8:	20000090 	.word	0x20000090
 8000afc:	20000190 	.word	0x20000190

08000b00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <task_display1>:
#include "main.h"
#include "global.h"
#include "task.h"
#include <stdio.h>

void task_display1() {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b10:	2120      	movs	r1, #32
 8000b12:	4802      	ldr	r0, [pc, #8]	; (8000b1c <task_display1+0x10>)
 8000b14:	f000 fc08 	bl	8001328 <HAL_GPIO_TogglePin>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40010800 	.word	0x40010800

08000b20 <task_display2>:
void task_display2() {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000b24:	2140      	movs	r1, #64	; 0x40
 8000b26:	4802      	ldr	r0, [pc, #8]	; (8000b30 <task_display2+0x10>)
 8000b28:	f000 fbfe 	bl	8001328 <HAL_GPIO_TogglePin>
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40010800 	.word	0x40010800

08000b34 <task_display3>:
void task_display3() {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	4802      	ldr	r0, [pc, #8]	; (8000b44 <task_display3+0x10>)
 8000b3c:	f000 fbf4 	bl	8001328 <HAL_GPIO_TogglePin>
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40010800 	.word	0x40010800

08000b48 <task_display4>:
void task_display4() {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000b4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <task_display4+0x14>)
 8000b52:	f000 fbe9 	bl	8001328 <HAL_GPIO_TogglePin>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40010800 	.word	0x40010800

08000b60 <task_display5>:
void task_display5() {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <task_display5+0x14>)
 8000b6a:	f000 fbdd 	bl	8001328 <HAL_GPIO_TogglePin>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010800 	.word	0x40010800

08000b78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	480c      	ldr	r0, [pc, #48]	; (8000bac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b7a:	490d      	ldr	r1, [pc, #52]	; (8000bb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b90:	4c0a      	ldr	r4, [pc, #40]	; (8000bbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b9e:	f7ff ffaf 	bl	8000b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f001 ffdb 	bl	8002b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ba6:	f7ff fad1 	bl	800014c <main>
  bx lr
 8000baa:	4770      	bx	lr
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bb4:	08003d24 	.word	0x08003d24
  ldr r2, =_sbss
 8000bb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bbc:	20000190 	.word	0x20000190

08000bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC1_2_IRQHandler>
	...

08000bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_Init+0x28>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a07      	ldr	r2, [pc, #28]	; (8000bec <HAL_Init+0x28>)
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f923 	bl	8000e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bda:	200f      	movs	r0, #15
 8000bdc:	f000 f808 	bl	8000bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be0:	f7ff fe0a 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40022000 	.word	0x40022000

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0x54>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_InitTick+0x58>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f93b 	bl	8000e8a <HAL_SYSTICK_Config>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00e      	b.n	8000c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d80a      	bhi.n	8000c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c24:	2200      	movs	r2, #0
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f000 f903 	bl	8000e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c30:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <HAL_InitTick+0x5c>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e000      	b.n	8000c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000004 	.word	0x20000004

08000c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x1c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_IncTick+0x20>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a03      	ldr	r2, [pc, #12]	; (8000c70 <HAL_IncTick+0x20>)
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	2000017c 	.word	0x2000017c

08000c74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <HAL_GetTick+0x10>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	2000017c 	.word	0x2000017c

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db0b      	blt.n	8000d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 021f 	and.w	r2, r3, #31
 8000d04:	4906      	ldr	r1, [pc, #24]	; (8000d20 <__NVIC_EnableIRQ+0x34>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dec:	d301      	bcc.n	8000df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00f      	b.n	8000e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <SysTick_Config+0x40>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f7ff ff90 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <SysTick_Config+0x40>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <SysTick_Config+0x40>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff2d 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e48:	f7ff ff42 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6978      	ldr	r0, [r7, #20]
 8000e54:	f7ff ff90 	bl	8000d78 <NVIC_EncodePriority>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff5f 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff35 	bl	8000cec <__NVIC_EnableIRQ>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffa2 	bl	8000ddc <SysTick_Config>
 8000e98:	4603      	mov	r3, r0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b085      	sub	sp, #20
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d008      	beq.n	8000eca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2204      	movs	r2, #4
 8000ebc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e020      	b.n	8000f0c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 020e 	bic.w	r2, r2, #14
 8000ed8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 0201 	bic.w	r2, r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2201      	movs	r2, #1
 8000efe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
	...

08000f18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d005      	beq.n	8000f3a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2204      	movs	r2, #4
 8000f32:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	e051      	b.n	8000fde <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 020e 	bic.w	r2, r2, #14
 8000f48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0201 	bic.w	r2, r2, #1
 8000f58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <HAL_DMA_Abort_IT+0xd0>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d029      	beq.n	8000fb8 <HAL_DMA_Abort_IT+0xa0>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a20      	ldr	r2, [pc, #128]	; (8000fec <HAL_DMA_Abort_IT+0xd4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d022      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x9c>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a1f      	ldr	r2, [pc, #124]	; (8000ff0 <HAL_DMA_Abort_IT+0xd8>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d01a      	beq.n	8000fae <HAL_DMA_Abort_IT+0x96>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a1d      	ldr	r2, [pc, #116]	; (8000ff4 <HAL_DMA_Abort_IT+0xdc>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d012      	beq.n	8000fa8 <HAL_DMA_Abort_IT+0x90>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <HAL_DMA_Abort_IT+0xe0>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d00a      	beq.n	8000fa2 <HAL_DMA_Abort_IT+0x8a>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a1a      	ldr	r2, [pc, #104]	; (8000ffc <HAL_DMA_Abort_IT+0xe4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d102      	bne.n	8000f9c <HAL_DMA_Abort_IT+0x84>
 8000f96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f9a:	e00e      	b.n	8000fba <HAL_DMA_Abort_IT+0xa2>
 8000f9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fa0:	e00b      	b.n	8000fba <HAL_DMA_Abort_IT+0xa2>
 8000fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa6:	e008      	b.n	8000fba <HAL_DMA_Abort_IT+0xa2>
 8000fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fac:	e005      	b.n	8000fba <HAL_DMA_Abort_IT+0xa2>
 8000fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb2:	e002      	b.n	8000fba <HAL_DMA_Abort_IT+0xa2>
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	e000      	b.n	8000fba <HAL_DMA_Abort_IT+0xa2>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4a11      	ldr	r2, [pc, #68]	; (8001000 <HAL_DMA_Abort_IT+0xe8>)
 8000fbc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	4798      	blx	r3
    } 
  }
  return status;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40020008 	.word	0x40020008
 8000fec:	4002001c 	.word	0x4002001c
 8000ff0:	40020030 	.word	0x40020030
 8000ff4:	40020044 	.word	0x40020044
 8000ff8:	40020058 	.word	0x40020058
 8000ffc:	4002006c 	.word	0x4002006c
 8001000:	40020000 	.word	0x40020000

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b08b      	sub	sp, #44	; 0x2c
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001016:	e148      	b.n	80012aa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001018:	2201      	movs	r2, #1
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	429a      	cmp	r2, r3
 8001032:	f040 8137 	bne.w	80012a4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	4aa3      	ldr	r2, [pc, #652]	; (80012c8 <HAL_GPIO_Init+0x2c4>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d05e      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
 8001040:	4aa1      	ldr	r2, [pc, #644]	; (80012c8 <HAL_GPIO_Init+0x2c4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d875      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 8001046:	4aa1      	ldr	r2, [pc, #644]	; (80012cc <HAL_GPIO_Init+0x2c8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d058      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
 800104c:	4a9f      	ldr	r2, [pc, #636]	; (80012cc <HAL_GPIO_Init+0x2c8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d86f      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 8001052:	4a9f      	ldr	r2, [pc, #636]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d052      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
 8001058:	4a9d      	ldr	r2, [pc, #628]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d869      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 800105e:	4a9d      	ldr	r2, [pc, #628]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d04c      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
 8001064:	4a9b      	ldr	r2, [pc, #620]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d863      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 800106a:	4a9b      	ldr	r2, [pc, #620]	; (80012d8 <HAL_GPIO_Init+0x2d4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d046      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
 8001070:	4a99      	ldr	r2, [pc, #612]	; (80012d8 <HAL_GPIO_Init+0x2d4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d85d      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 8001076:	2b12      	cmp	r3, #18
 8001078:	d82a      	bhi.n	80010d0 <HAL_GPIO_Init+0xcc>
 800107a:	2b12      	cmp	r3, #18
 800107c:	d859      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 800107e:	a201      	add	r2, pc, #4	; (adr r2, 8001084 <HAL_GPIO_Init+0x80>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	080010ff 	.word	0x080010ff
 8001088:	080010d9 	.word	0x080010d9
 800108c:	080010eb 	.word	0x080010eb
 8001090:	0800112d 	.word	0x0800112d
 8001094:	08001133 	.word	0x08001133
 8001098:	08001133 	.word	0x08001133
 800109c:	08001133 	.word	0x08001133
 80010a0:	08001133 	.word	0x08001133
 80010a4:	08001133 	.word	0x08001133
 80010a8:	08001133 	.word	0x08001133
 80010ac:	08001133 	.word	0x08001133
 80010b0:	08001133 	.word	0x08001133
 80010b4:	08001133 	.word	0x08001133
 80010b8:	08001133 	.word	0x08001133
 80010bc:	08001133 	.word	0x08001133
 80010c0:	08001133 	.word	0x08001133
 80010c4:	08001133 	.word	0x08001133
 80010c8:	080010e1 	.word	0x080010e1
 80010cc:	080010f5 	.word	0x080010f5
 80010d0:	4a82      	ldr	r2, [pc, #520]	; (80012dc <HAL_GPIO_Init+0x2d8>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010d6:	e02c      	b.n	8001132 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	623b      	str	r3, [r7, #32]
          break;
 80010de:	e029      	b.n	8001134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	3304      	adds	r3, #4
 80010e6:	623b      	str	r3, [r7, #32]
          break;
 80010e8:	e024      	b.n	8001134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	3308      	adds	r3, #8
 80010f0:	623b      	str	r3, [r7, #32]
          break;
 80010f2:	e01f      	b.n	8001134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	330c      	adds	r3, #12
 80010fa:	623b      	str	r3, [r7, #32]
          break;
 80010fc:	e01a      	b.n	8001134 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d102      	bne.n	800110c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001106:	2304      	movs	r3, #4
 8001108:	623b      	str	r3, [r7, #32]
          break;
 800110a:	e013      	b.n	8001134 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d105      	bne.n	8001120 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001114:	2308      	movs	r3, #8
 8001116:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	611a      	str	r2, [r3, #16]
          break;
 800111e:	e009      	b.n	8001134 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001120:	2308      	movs	r3, #8
 8001122:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	615a      	str	r2, [r3, #20]
          break;
 800112a:	e003      	b.n	8001134 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
          break;
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x130>
          break;
 8001132:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2bff      	cmp	r3, #255	; 0xff
 8001138:	d801      	bhi.n	800113e <HAL_GPIO_Init+0x13a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	e001      	b.n	8001142 <HAL_GPIO_Init+0x13e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3304      	adds	r3, #4
 8001142:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	2bff      	cmp	r3, #255	; 0xff
 8001148:	d802      	bhi.n	8001150 <HAL_GPIO_Init+0x14c>
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	e002      	b.n	8001156 <HAL_GPIO_Init+0x152>
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	3b08      	subs	r3, #8
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	210f      	movs	r1, #15
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	401a      	ands	r2, r3
 8001168:	6a39      	ldr	r1, [r7, #32]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	431a      	orrs	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 8090 	beq.w	80012a4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001184:	4b56      	ldr	r3, [pc, #344]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a55      	ldr	r2, [pc, #340]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800119c:	4a51      	ldr	r2, [pc, #324]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	220f      	movs	r2, #15
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4013      	ands	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a49      	ldr	r2, [pc, #292]	; (80012e8 <HAL_GPIO_Init+0x2e4>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d00d      	beq.n	80011e4 <HAL_GPIO_Init+0x1e0>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a48      	ldr	r2, [pc, #288]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d007      	beq.n	80011e0 <HAL_GPIO_Init+0x1dc>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a47      	ldr	r2, [pc, #284]	; (80012f0 <HAL_GPIO_Init+0x2ec>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d101      	bne.n	80011dc <HAL_GPIO_Init+0x1d8>
 80011d8:	2302      	movs	r3, #2
 80011da:	e004      	b.n	80011e6 <HAL_GPIO_Init+0x1e2>
 80011dc:	2303      	movs	r3, #3
 80011de:	e002      	b.n	80011e6 <HAL_GPIO_Init+0x1e2>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <HAL_GPIO_Init+0x1e2>
 80011e4:	2300      	movs	r3, #0
 80011e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e8:	f002 0203 	and.w	r2, r2, #3
 80011ec:	0092      	lsls	r2, r2, #2
 80011ee:	4093      	lsls	r3, r2
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011f6:	493b      	ldr	r1, [pc, #236]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001210:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4937      	ldr	r1, [pc, #220]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	600b      	str	r3, [r1, #0]
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800121e:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	43db      	mvns	r3, r3
 8001226:	4933      	ldr	r1, [pc, #204]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 8001228:	4013      	ands	r3, r2
 800122a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d006      	beq.n	8001246 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001238:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	492d      	ldr	r1, [pc, #180]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	43db      	mvns	r3, r3
 800124e:	4929      	ldr	r1, [pc, #164]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 8001250:	4013      	ands	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	4923      	ldr	r1, [pc, #140]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	608b      	str	r3, [r1, #8]
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	43db      	mvns	r3, r3
 8001276:	491f      	ldr	r1, [pc, #124]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 8001278:	4013      	ands	r3, r2
 800127a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	4919      	ldr	r1, [pc, #100]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	60cb      	str	r3, [r1, #12]
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	43db      	mvns	r3, r3
 800129e:	4915      	ldr	r1, [pc, #84]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	3301      	adds	r3, #1
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	fa22 f303 	lsr.w	r3, r2, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f47f aeaf 	bne.w	8001018 <HAL_GPIO_Init+0x14>
  }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	372c      	adds	r7, #44	; 0x2c
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	10320000 	.word	0x10320000
 80012cc:	10310000 	.word	0x10310000
 80012d0:	10220000 	.word	0x10220000
 80012d4:	10210000 	.word	0x10210000
 80012d8:	10120000 	.word	0x10120000
 80012dc:	10110000 	.word	0x10110000
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000
 80012e8:	40010800 	.word	0x40010800
 80012ec:	40010c00 	.word	0x40010c00
 80012f0:	40011000 	.word	0x40011000
 80012f4:	40010400 	.word	0x40010400

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001314:	e003      	b.n	800131e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	041a      	lsls	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	611a      	str	r2, [r3, #16]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4013      	ands	r3, r2
 8001340:	041a      	lsls	r2, r3, #16
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43d9      	mvns	r1, r3
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	400b      	ands	r3, r1
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	611a      	str	r2, [r3, #16]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
	...

0800135c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e26c      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 8087 	beq.w	800148a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800137c:	4b92      	ldr	r3, [pc, #584]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b04      	cmp	r3, #4
 8001386:	d00c      	beq.n	80013a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001388:	4b8f      	ldr	r3, [pc, #572]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b08      	cmp	r3, #8
 8001392:	d112      	bne.n	80013ba <HAL_RCC_OscConfig+0x5e>
 8001394:	4b8c      	ldr	r3, [pc, #560]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a0:	d10b      	bne.n	80013ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a2:	4b89      	ldr	r3, [pc, #548]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d06c      	beq.n	8001488 <HAL_RCC_OscConfig+0x12c>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d168      	bne.n	8001488 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e246      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c2:	d106      	bne.n	80013d2 <HAL_RCC_OscConfig+0x76>
 80013c4:	4b80      	ldr	r3, [pc, #512]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a7f      	ldr	r2, [pc, #508]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	e02e      	b.n	8001430 <HAL_RCC_OscConfig+0xd4>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x98>
 80013da:	4b7b      	ldr	r3, [pc, #492]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a7a      	ldr	r2, [pc, #488]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b78      	ldr	r3, [pc, #480]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a77      	ldr	r2, [pc, #476]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e01d      	b.n	8001430 <HAL_RCC_OscConfig+0xd4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0xbc>
 80013fe:	4b72      	ldr	r3, [pc, #456]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a71      	ldr	r2, [pc, #452]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b6f      	ldr	r3, [pc, #444]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a6e      	ldr	r2, [pc, #440]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e00b      	b.n	8001430 <HAL_RCC_OscConfig+0xd4>
 8001418:	4b6b      	ldr	r3, [pc, #428]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a6a      	ldr	r2, [pc, #424]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800141e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b68      	ldr	r3, [pc, #416]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a67      	ldr	r2, [pc, #412]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800142a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fc1c 	bl	8000c74 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fc18 	bl	8000c74 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e1fa      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b5d      	ldr	r3, [pc, #372]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0xe4>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fc08 	bl	8000c74 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fc04 	bl	8000c74 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e1e6      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	4b53      	ldr	r3, [pc, #332]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x10c>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d063      	beq.n	800155e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001496:	4b4c      	ldr	r3, [pc, #304]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014a2:	4b49      	ldr	r3, [pc, #292]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d11c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x18c>
 80014ae:	4b46      	ldr	r3, [pc, #280]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d116      	bne.n	80014e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ba:	4b43      	ldr	r3, [pc, #268]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x176>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e1ba      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4939      	ldr	r1, [pc, #228]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	e03a      	b.n	800155e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d020      	beq.n	8001532 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f0:	4b36      	ldr	r3, [pc, #216]	; (80015cc <HAL_RCC_OscConfig+0x270>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fbbd 	bl	8000c74 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fe:	f7ff fbb9 	bl	8000c74 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e19b      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001510:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151c:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4927      	ldr	r1, [pc, #156]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800152c:	4313      	orrs	r3, r2
 800152e:	600b      	str	r3, [r1, #0]
 8001530:	e015      	b.n	800155e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001532:	4b26      	ldr	r3, [pc, #152]	; (80015cc <HAL_RCC_OscConfig+0x270>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fb9c 	bl	8000c74 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001540:	f7ff fb98 	bl	8000c74 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e17a      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d03a      	beq.n	80015e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d019      	beq.n	80015a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <HAL_RCC_OscConfig+0x274>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001578:	f7ff fb7c 	bl	8000c74 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001580:	f7ff fb78 	bl	8000c74 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e15a      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800159e:	2001      	movs	r0, #1
 80015a0:	f000 fad8 	bl	8001b54 <RCC_Delay>
 80015a4:	e01c      	b.n	80015e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <HAL_RCC_OscConfig+0x274>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ac:	f7ff fb62 	bl	8000c74 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b2:	e00f      	b.n	80015d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b4:	f7ff fb5e 	bl	8000c74 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d908      	bls.n	80015d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e140      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
 80015cc:	42420000 	.word	0x42420000
 80015d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d4:	4b9e      	ldr	r3, [pc, #632]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1e9      	bne.n	80015b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80a6 	beq.w	800173a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f2:	4b97      	ldr	r3, [pc, #604]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10d      	bne.n	800161a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	4b94      	ldr	r3, [pc, #592]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a93      	ldr	r2, [pc, #588]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	61d3      	str	r3, [r2, #28]
 800160a:	4b91      	ldr	r3, [pc, #580]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001616:	2301      	movs	r3, #1
 8001618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161a:	4b8e      	ldr	r3, [pc, #568]	; (8001854 <HAL_RCC_OscConfig+0x4f8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001622:	2b00      	cmp	r3, #0
 8001624:	d118      	bne.n	8001658 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001626:	4b8b      	ldr	r3, [pc, #556]	; (8001854 <HAL_RCC_OscConfig+0x4f8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a8a      	ldr	r2, [pc, #552]	; (8001854 <HAL_RCC_OscConfig+0x4f8>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001632:	f7ff fb1f 	bl	8000c74 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163a:	f7ff fb1b 	bl	8000c74 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b64      	cmp	r3, #100	; 0x64
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e0fd      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	4b81      	ldr	r3, [pc, #516]	; (8001854 <HAL_RCC_OscConfig+0x4f8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x312>
 8001660:	4b7b      	ldr	r3, [pc, #492]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4a7a      	ldr	r2, [pc, #488]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6213      	str	r3, [r2, #32]
 800166c:	e02d      	b.n	80016ca <HAL_RCC_OscConfig+0x36e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x334>
 8001676:	4b76      	ldr	r3, [pc, #472]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4a75      	ldr	r2, [pc, #468]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	6213      	str	r3, [r2, #32]
 8001682:	4b73      	ldr	r3, [pc, #460]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4a72      	ldr	r2, [pc, #456]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001688:	f023 0304 	bic.w	r3, r3, #4
 800168c:	6213      	str	r3, [r2, #32]
 800168e:	e01c      	b.n	80016ca <HAL_RCC_OscConfig+0x36e>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b05      	cmp	r3, #5
 8001696:	d10c      	bne.n	80016b2 <HAL_RCC_OscConfig+0x356>
 8001698:	4b6d      	ldr	r3, [pc, #436]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4a6c      	ldr	r2, [pc, #432]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6213      	str	r3, [r2, #32]
 80016a4:	4b6a      	ldr	r3, [pc, #424]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4a69      	ldr	r2, [pc, #420]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6213      	str	r3, [r2, #32]
 80016b0:	e00b      	b.n	80016ca <HAL_RCC_OscConfig+0x36e>
 80016b2:	4b67      	ldr	r3, [pc, #412]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4a66      	ldr	r2, [pc, #408]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	f023 0301 	bic.w	r3, r3, #1
 80016bc:	6213      	str	r3, [r2, #32]
 80016be:	4b64      	ldr	r3, [pc, #400]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4a63      	ldr	r2, [pc, #396]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80016c4:	f023 0304 	bic.w	r3, r3, #4
 80016c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d015      	beq.n	80016fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d2:	f7ff facf 	bl	8000c74 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d8:	e00a      	b.n	80016f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016da:	f7ff facb 	bl	8000c74 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e0ab      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f0:	4b57      	ldr	r3, [pc, #348]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0ee      	beq.n	80016da <HAL_RCC_OscConfig+0x37e>
 80016fc:	e014      	b.n	8001728 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fab9 	bl	8000c74 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001704:	e00a      	b.n	800171c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff fab5 	bl	8000c74 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f241 3288 	movw	r2, #5000	; 0x1388
 8001714:	4293      	cmp	r3, r2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e095      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171c:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1ee      	bne.n	8001706 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d105      	bne.n	800173a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172e:	4b48      	ldr	r3, [pc, #288]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	4a47      	ldr	r2, [pc, #284]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001738:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 8081 	beq.w	8001846 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001744:	4b42      	ldr	r3, [pc, #264]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	d061      	beq.n	8001814 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d146      	bne.n	80017e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001758:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <HAL_RCC_OscConfig+0x4fc>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175e:	f7ff fa89 	bl	8000c74 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001766:	f7ff fa85 	bl	8000c74 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e067      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001778:	4b35      	ldr	r3, [pc, #212]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f0      	bne.n	8001766 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178c:	d108      	bne.n	80017a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800178e:	4b30      	ldr	r3, [pc, #192]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	492d      	ldr	r1, [pc, #180]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a0:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a19      	ldr	r1, [r3, #32]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	430b      	orrs	r3, r1
 80017b2:	4927      	ldr	r1, [pc, #156]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <HAL_RCC_OscConfig+0x4fc>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff fa59 	bl	8000c74 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c6:	f7ff fa55 	bl	8000c74 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e037      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x46a>
 80017e4:	e02f      	b.n	8001846 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_RCC_OscConfig+0x4fc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fa42 	bl	8000c74 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff fa3e 	bl	8000c74 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e020      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x498>
 8001812:	e018      	b.n	8001846 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d101      	bne.n	8001820 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e013      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	429a      	cmp	r2, r3
 8001832:	d106      	bne.n	8001842 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	40007000 	.word	0x40007000
 8001858:	42420060 	.word	0x42420060

0800185c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0d0      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001870:	4b6a      	ldr	r3, [pc, #424]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d910      	bls.n	80018a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b67      	ldr	r3, [pc, #412]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 0207 	bic.w	r2, r3, #7
 8001886:	4965      	ldr	r1, [pc, #404]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	4313      	orrs	r3, r2
 800188c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0b8      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d020      	beq.n	80018ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b8:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d0:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4a52      	ldr	r2, [pc, #328]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018dc:	4b50      	ldr	r3, [pc, #320]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	494d      	ldr	r1, [pc, #308]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d040      	beq.n	800197c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d115      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e07f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191a:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d109      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e073      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192a:	4b3d      	ldr	r3, [pc, #244]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e06b      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800193a:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f023 0203 	bic.w	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4936      	ldr	r1, [pc, #216]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800194c:	f7ff f992 	bl	8000c74 <HAL_GetTick>
 8001950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	e00a      	b.n	800196a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001954:	f7ff f98e 	bl	8000c74 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e053      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 020c 	and.w	r2, r3, #12
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	429a      	cmp	r2, r3
 800197a:	d1eb      	bne.n	8001954 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d210      	bcs.n	80019ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 0207 	bic.w	r2, r3, #7
 8001992:	4922      	ldr	r1, [pc, #136]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e032      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d008      	beq.n	80019ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4916      	ldr	r1, [pc, #88]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d009      	beq.n	80019ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	490e      	ldr	r1, [pc, #56]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ea:	f000 f821 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 80019ee:	4602      	mov	r2, r0
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	490a      	ldr	r1, [pc, #40]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80019fc:	5ccb      	ldrb	r3, [r1, r3]
 80019fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001a02:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <HAL_RCC_ClockConfig+0x1cc>)
 8001a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_RCC_ClockConfig+0x1d0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f8f0 	bl	8000bf0 <HAL_InitTick>

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40022000 	.word	0x40022000
 8001a20:	40021000 	.word	0x40021000
 8001a24:	08003c6c 	.word	0x08003c6c
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20000004 	.word	0x20000004

08001a30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a30:	b490      	push	{r4, r7}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a36:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a38:	1d3c      	adds	r4, r7, #4
 8001a3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a40:	f240 2301 	movw	r3, #513	; 0x201
 8001a44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a5a:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d002      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x40>
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d003      	beq.n	8001a76 <HAL_RCC_GetSysClockFreq+0x46>
 8001a6e:	e02d      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a72:	623b      	str	r3, [r7, #32]
      break;
 8001a74:	e02d      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	0c9b      	lsrs	r3, r3, #18
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a82:	4413      	add	r3, r2
 8001a84:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a88:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d013      	beq.n	8001abc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	0c5b      	lsrs	r3, r3, #17
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001aa8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aae:	fb02 f203 	mul.w	r2, r2, r3
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aba:	e004      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ac0:	fb02 f303 	mul.w	r3, r2, r3
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	623b      	str	r3, [r7, #32]
      break;
 8001aca:	e002      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ace:	623b      	str	r3, [r7, #32]
      break;
 8001ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3728      	adds	r7, #40	; 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc90      	pop	{r4, r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	08003c5c 	.word	0x08003c5c
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	007a1200 	.word	0x007a1200
 8001aec:	003d0900 	.word	0x003d0900

08001af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af4:	4b02      	ldr	r3, [pc, #8]	; (8001b00 <HAL_RCC_GetHCLKFreq+0x10>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	20000000 	.word	0x20000000

08001b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b08:	f7ff fff2 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	0a1b      	lsrs	r3, r3, #8
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4903      	ldr	r1, [pc, #12]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40021000 	.word	0x40021000
 8001b28:	08003c7c 	.word	0x08003c7c

08001b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b30:	f7ff ffde 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	0adb      	lsrs	r3, r3, #11
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4903      	ldr	r1, [pc, #12]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b42:	5ccb      	ldrb	r3, [r1, r3]
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	08003c7c 	.word	0x08003c7c

08001b54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <RCC_Delay+0x34>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <RCC_Delay+0x38>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	0a5b      	lsrs	r3, r3, #9
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b70:	bf00      	nop
  }
  while (Delay --);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	60fa      	str	r2, [r7, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f9      	bne.n	8001b70 <RCC_Delay+0x1c>
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	10624dd3 	.word	0x10624dd3

08001b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e041      	b.n	8001c26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7fe fe50 	bl	800085c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f000 fa6a 	bl	80020a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d001      	beq.n	8001c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e035      	b.n	8001cb4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a16      	ldr	r2, [pc, #88]	; (8001cc0 <HAL_TIM_Base_Start_IT+0x90>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d009      	beq.n	8001c7e <HAL_TIM_Base_Start_IT+0x4e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c72:	d004      	beq.n	8001c7e <HAL_TIM_Base_Start_IT+0x4e>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <HAL_TIM_Base_Start_IT+0x94>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d111      	bne.n	8001ca2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b06      	cmp	r3, #6
 8001c8e:	d010      	beq.n	8001cb2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca0:	e007      	b.n	8001cb2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40012c00 	.word	0x40012c00
 8001cc4:	40000400 	.word	0x40000400

08001cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d122      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d11b      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0202 	mvn.w	r2, #2
 8001cf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f9b1 	bl	8002072 <HAL_TIM_IC_CaptureCallback>
 8001d10:	e005      	b.n	8001d1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f9a4 	bl	8002060 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f9b3 	bl	8002084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d122      	bne.n	8001d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d11b      	bne.n	8001d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0204 	mvn.w	r2, #4
 8001d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f987 	bl	8002072 <HAL_TIM_IC_CaptureCallback>
 8001d64:	e005      	b.n	8001d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f97a 	bl	8002060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f989 	bl	8002084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d122      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d11b      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0208 	mvn.w	r2, #8
 8001d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2204      	movs	r2, #4
 8001da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f95d 	bl	8002072 <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f950 	bl	8002060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f95f 	bl	8002084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b10      	cmp	r3, #16
 8001dd8:	d122      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b10      	cmp	r3, #16
 8001de6:	d11b      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0210 	mvn.w	r2, #16
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2208      	movs	r2, #8
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f933 	bl	8002072 <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f926 	bl	8002060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f935 	bl	8002084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d10e      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d107      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0201 	mvn.w	r2, #1
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe fab6 	bl	80003b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e56:	2b80      	cmp	r3, #128	; 0x80
 8001e58:	d10e      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e64:	2b80      	cmp	r3, #128	; 0x80
 8001e66:	d107      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fa67 	bl	8002346 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e82:	2b40      	cmp	r3, #64	; 0x40
 8001e84:	d10e      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e90:	2b40      	cmp	r3, #64	; 0x40
 8001e92:	d107      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8f9 	bl	8002096 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d10e      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	d107      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0220 	mvn.w	r2, #32
 8001ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fa32 	bl	8002334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_TIM_ConfigClockSource+0x18>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e0b3      	b.n	8002058 <HAL_TIM_ConfigClockSource+0x180>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f28:	d03e      	beq.n	8001fa8 <HAL_TIM_ConfigClockSource+0xd0>
 8001f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f2e:	f200 8087 	bhi.w	8002040 <HAL_TIM_ConfigClockSource+0x168>
 8001f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f36:	f000 8085 	beq.w	8002044 <HAL_TIM_ConfigClockSource+0x16c>
 8001f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f3e:	d87f      	bhi.n	8002040 <HAL_TIM_ConfigClockSource+0x168>
 8001f40:	2b70      	cmp	r3, #112	; 0x70
 8001f42:	d01a      	beq.n	8001f7a <HAL_TIM_ConfigClockSource+0xa2>
 8001f44:	2b70      	cmp	r3, #112	; 0x70
 8001f46:	d87b      	bhi.n	8002040 <HAL_TIM_ConfigClockSource+0x168>
 8001f48:	2b60      	cmp	r3, #96	; 0x60
 8001f4a:	d050      	beq.n	8001fee <HAL_TIM_ConfigClockSource+0x116>
 8001f4c:	2b60      	cmp	r3, #96	; 0x60
 8001f4e:	d877      	bhi.n	8002040 <HAL_TIM_ConfigClockSource+0x168>
 8001f50:	2b50      	cmp	r3, #80	; 0x50
 8001f52:	d03c      	beq.n	8001fce <HAL_TIM_ConfigClockSource+0xf6>
 8001f54:	2b50      	cmp	r3, #80	; 0x50
 8001f56:	d873      	bhi.n	8002040 <HAL_TIM_ConfigClockSource+0x168>
 8001f58:	2b40      	cmp	r3, #64	; 0x40
 8001f5a:	d058      	beq.n	800200e <HAL_TIM_ConfigClockSource+0x136>
 8001f5c:	2b40      	cmp	r3, #64	; 0x40
 8001f5e:	d86f      	bhi.n	8002040 <HAL_TIM_ConfigClockSource+0x168>
 8001f60:	2b30      	cmp	r3, #48	; 0x30
 8001f62:	d064      	beq.n	800202e <HAL_TIM_ConfigClockSource+0x156>
 8001f64:	2b30      	cmp	r3, #48	; 0x30
 8001f66:	d86b      	bhi.n	8002040 <HAL_TIM_ConfigClockSource+0x168>
 8001f68:	2b20      	cmp	r3, #32
 8001f6a:	d060      	beq.n	800202e <HAL_TIM_ConfigClockSource+0x156>
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d867      	bhi.n	8002040 <HAL_TIM_ConfigClockSource+0x168>
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d05c      	beq.n	800202e <HAL_TIM_ConfigClockSource+0x156>
 8001f74:	2b10      	cmp	r3, #16
 8001f76:	d05a      	beq.n	800202e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001f78:	e062      	b.n	8002040 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6899      	ldr	r1, [r3, #8]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f000 f95c 	bl	8002246 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	609a      	str	r2, [r3, #8]
      break;
 8001fa6:	e04e      	b.n	8002046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6899      	ldr	r1, [r3, #8]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f000 f945 	bl	8002246 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fca:	609a      	str	r2, [r3, #8]
      break;
 8001fcc:	e03b      	b.n	8002046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6859      	ldr	r1, [r3, #4]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f000 f8bc 	bl	8002158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2150      	movs	r1, #80	; 0x50
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f913 	bl	8002212 <TIM_ITRx_SetConfig>
      break;
 8001fec:	e02b      	b.n	8002046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6859      	ldr	r1, [r3, #4]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f000 f8da 	bl	80021b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2160      	movs	r1, #96	; 0x60
 8002006:	4618      	mov	r0, r3
 8002008:	f000 f903 	bl	8002212 <TIM_ITRx_SetConfig>
      break;
 800200c:	e01b      	b.n	8002046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6859      	ldr	r1, [r3, #4]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	461a      	mov	r2, r3
 800201c:	f000 f89c 	bl	8002158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2140      	movs	r1, #64	; 0x40
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f8f3 	bl	8002212 <TIM_ITRx_SetConfig>
      break;
 800202c:	e00b      	b.n	8002046 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4619      	mov	r1, r3
 8002038:	4610      	mov	r0, r2
 800203a:	f000 f8ea 	bl	8002212 <TIM_ITRx_SetConfig>
        break;
 800203e:	e002      	b.n	8002046 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002040:	bf00      	nop
 8002042:	e000      	b.n	8002046 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002044:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a25      	ldr	r2, [pc, #148]	; (8002150 <TIM_Base_SetConfig+0xa8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d007      	beq.n	80020d0 <TIM_Base_SetConfig+0x28>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c6:	d003      	beq.n	80020d0 <TIM_Base_SetConfig+0x28>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a22      	ldr	r2, [pc, #136]	; (8002154 <TIM_Base_SetConfig+0xac>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d108      	bne.n	80020e2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a1a      	ldr	r2, [pc, #104]	; (8002150 <TIM_Base_SetConfig+0xa8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <TIM_Base_SetConfig+0x52>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f0:	d003      	beq.n	80020fa <TIM_Base_SetConfig+0x52>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a17      	ldr	r2, [pc, #92]	; (8002154 <TIM_Base_SetConfig+0xac>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d108      	bne.n	800210c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	4313      	orrs	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <TIM_Base_SetConfig+0xa8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d103      	bne.n	8002140 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	615a      	str	r2, [r3, #20]
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	40012c00 	.word	0x40012c00
 8002154:	40000400 	.word	0x40000400

08002158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	f023 0201 	bic.w	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f023 030a 	bic.w	r3, r3, #10
 8002194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4313      	orrs	r3, r2
 800219c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	621a      	str	r2, [r3, #32]
}
 80021aa:	bf00      	nop
 80021ac:	371c      	adds	r7, #28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f023 0210 	bic.w	r2, r3, #16
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	031b      	lsls	r3, r3, #12
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	621a      	str	r2, [r3, #32]
}
 8002208:	bf00      	nop
 800220a:	371c      	adds	r7, #28
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr

08002212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	f043 0307 	orr.w	r3, r3, #7
 8002234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	609a      	str	r2, [r3, #8]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr

08002246 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002246:	b480      	push	{r7}
 8002248:	b087      	sub	sp, #28
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002260:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	021a      	lsls	r2, r3, #8
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	431a      	orrs	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	4313      	orrs	r3, r2
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	609a      	str	r2, [r3, #8]
}
 800227a:	bf00      	nop
 800227c:	371c      	adds	r7, #28
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002298:	2302      	movs	r3, #2
 800229a:	e041      	b.n	8002320 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a14      	ldr	r2, [pc, #80]	; (800232c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d009      	beq.n	80022f4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e8:	d004      	beq.n	80022f4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a10      	ldr	r2, [pc, #64]	; (8002330 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d10c      	bne.n	800230e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	4313      	orrs	r3, r2
 8002304:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40012c00 	.word	0x40012c00
 8002330:	40000400 	.word	0x40000400

08002334 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr

08002346 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e03f      	b.n	80023ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7fe fa90 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2224      	movs	r2, #36	; 0x24
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800239a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fb49 	bl	8002a34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10d      	bne.n	8002446 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_UART_IRQHandler+0x52>
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fa4f 	bl	80028e2 <UART_Receive_IT>
      return;
 8002444:	e17b      	b.n	800273e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80b1 	beq.w	80025b0 <HAL_UART_IRQHandler+0x1bc>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d105      	bne.n	8002464 <HAL_UART_IRQHandler+0x70>
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80a6 	beq.w	80025b0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_UART_IRQHandler+0x90>
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f043 0201 	orr.w	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_UART_IRQHandler+0xb0>
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f043 0202 	orr.w	r2, r3, #2
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_UART_IRQHandler+0xd0>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	f043 0204 	orr.w	r2, r3, #4
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00f      	beq.n	80024ee <HAL_UART_IRQHandler+0xfa>
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d104      	bne.n	80024e2 <HAL_UART_IRQHandler+0xee>
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f043 0208 	orr.w	r2, r3, #8
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 811e 	beq.w	8002734 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <HAL_UART_IRQHandler+0x11e>
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f9e8 	bl	80028e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf14      	ite	ne
 8002520:	2301      	movne	r3, #1
 8002522:	2300      	moveq	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <HAL_UART_IRQHandler+0x146>
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d031      	beq.n	800259e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f92a 	bl	8002794 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d023      	beq.n	8002596 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800255c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002562:	2b00      	cmp	r3, #0
 8002564:	d013      	beq.n	800258e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256a:	4a76      	ldr	r2, [pc, #472]	; (8002744 <HAL_UART_IRQHandler+0x350>)
 800256c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fcd0 	bl	8000f18 <HAL_DMA_Abort_IT>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d016      	beq.n	80025ac <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002588:	4610      	mov	r0, r2
 800258a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800258c:	e00e      	b.n	80025ac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f8ec 	bl	800276c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002594:	e00a      	b.n	80025ac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f8e8 	bl	800276c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800259c:	e006      	b.n	80025ac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f8e4 	bl	800276c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80025aa:	e0c3      	b.n	8002734 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ac:	bf00      	nop
    return;
 80025ae:	e0c1      	b.n	8002734 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	f040 80a1 	bne.w	80026fc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 809b 	beq.w	80026fc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 8095 	beq.w	80026fc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d04e      	beq.n	8002694 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002600:	8a3b      	ldrh	r3, [r7, #16]
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8098 	beq.w	8002738 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800260c:	8a3a      	ldrh	r2, [r7, #16]
 800260e:	429a      	cmp	r2, r3
 8002610:	f080 8092 	bcs.w	8002738 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	8a3a      	ldrh	r2, [r7, #16]
 8002618:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b20      	cmp	r3, #32
 8002622:	d02b      	beq.n	800267c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002632:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002652:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0210 	bic.w	r2, r2, #16
 8002670:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fc13 	bl	8000ea2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002684:	b29b      	uxth	r3, r3
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	b29b      	uxth	r3, r3
 800268a:	4619      	mov	r1, r3
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f876 	bl	800277e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002692:	e051      	b.n	8002738 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800269c:	b29b      	uxth	r3, r3
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d047      	beq.n	800273c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80026ac:	8a7b      	ldrh	r3, [r7, #18]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d044      	beq.n	800273c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026c0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0210 	bic.w	r2, r2, #16
 80026ee:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026f0:	8a7b      	ldrh	r3, [r7, #18]
 80026f2:	4619      	mov	r1, r3
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f842 	bl	800277e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80026fa:	e01f      	b.n	800273c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_UART_IRQHandler+0x324>
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f87f 	bl	8002814 <UART_Transmit_IT>
    return;
 8002716:	e012      	b.n	800273e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00d      	beq.n	800273e <HAL_UART_IRQHandler+0x34a>
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f8c0 	bl	80028b2 <UART_EndTransmit_IT>
    return;
 8002732:	e004      	b.n	800273e <HAL_UART_IRQHandler+0x34a>
    return;
 8002734:	bf00      	nop
 8002736:	e002      	b.n	800273e <HAL_UART_IRQHandler+0x34a>
      return;
 8002738:	bf00      	nop
 800273a:	e000      	b.n	800273e <HAL_UART_IRQHandler+0x34a>
      return;
 800273c:	bf00      	nop
  }
}
 800273e:	3728      	adds	r7, #40	; 0x28
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	080027ed 	.word	0x080027ed

08002748 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027aa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d107      	bne.n	80027d4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0210 	bic.w	r2, r2, #16
 80027d2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f7ff ffb0 	bl	800276c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b21      	cmp	r3, #33	; 0x21
 8002826:	d13e      	bne.n	80028a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002830:	d114      	bne.n	800285c <UART_Transmit_IT+0x48>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d110      	bne.n	800285c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800284e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	1c9a      	adds	r2, r3, #2
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	621a      	str	r2, [r3, #32]
 800285a:	e008      	b.n	800286e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	1c59      	adds	r1, r3, #1
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6211      	str	r1, [r2, #32]
 8002866:	781a      	ldrb	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	b29b      	uxth	r3, r3
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	4619      	mov	r1, r3
 800287c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10f      	bne.n	80028a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002890:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e000      	b.n	80028a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028a6:	2302      	movs	r3, #2
  }
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ff38 	bl	8002748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b22      	cmp	r3, #34	; 0x22
 80028f4:	f040 8099 	bne.w	8002a2a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002900:	d117      	bne.n	8002932 <UART_Receive_IT+0x50>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d113      	bne.n	8002932 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	b29b      	uxth	r3, r3
 800291c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002920:	b29a      	uxth	r2, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	1c9a      	adds	r2, r3, #2
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	629a      	str	r2, [r3, #40]	; 0x28
 8002930:	e026      	b.n	8002980 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002938:	2300      	movs	r3, #0
 800293a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002944:	d007      	beq.n	8002956 <UART_Receive_IT+0x74>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10a      	bne.n	8002964 <UART_Receive_IT+0x82>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e008      	b.n	8002976 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002970:	b2da      	uxtb	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29b      	uxth	r3, r3
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4619      	mov	r1, r3
 800298e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002990:	2b00      	cmp	r3, #0
 8002992:	d148      	bne.n	8002a26 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0220 	bic.w	r2, r2, #32
 80029a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d123      	bne.n	8002a1c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0210 	bic.w	r2, r2, #16
 80029e8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b10      	cmp	r3, #16
 80029f6:	d10a      	bne.n	8002a0e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a12:	4619      	mov	r1, r3
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff feb2 	bl	800277e <HAL_UARTEx_RxEventCallback>
 8002a1a:	e002      	b.n	8002a22 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff fe9c 	bl	800275a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e002      	b.n	8002a2c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e000      	b.n	8002a2c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002a2a:	2302      	movs	r3, #2
  }
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a6e:	f023 030c 	bic.w	r3, r3, #12
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699a      	ldr	r2, [r3, #24]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a2c      	ldr	r2, [pc, #176]	; (8002b48 <UART_SetConfig+0x114>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d103      	bne.n	8002aa4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a9c:	f7ff f846 	bl	8001b2c <HAL_RCC_GetPCLK2Freq>
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	e002      	b.n	8002aaa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002aa4:	f7ff f82e 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 8002aa8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009a      	lsls	r2, r3, #2
 8002ab4:	441a      	add	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac0:	4a22      	ldr	r2, [pc, #136]	; (8002b4c <UART_SetConfig+0x118>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	0119      	lsls	r1, r3, #4
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009a      	lsls	r2, r3, #2
 8002ad4:	441a      	add	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae0:	4b1a      	ldr	r3, [pc, #104]	; (8002b4c <UART_SetConfig+0x118>)
 8002ae2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	2064      	movs	r0, #100	; 0x64
 8002aea:	fb00 f303 	mul.w	r3, r0, r3
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	3332      	adds	r3, #50	; 0x32
 8002af4:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <UART_SetConfig+0x118>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b00:	4419      	add	r1, r3
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	009a      	lsls	r2, r3, #2
 8002b0c:	441a      	add	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <UART_SetConfig+0x118>)
 8002b1a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	2064      	movs	r0, #100	; 0x64
 8002b22:	fb00 f303 	mul.w	r3, r0, r3
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	3332      	adds	r3, #50	; 0x32
 8002b2c:	4a07      	ldr	r2, [pc, #28]	; (8002b4c <UART_SetConfig+0x118>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	f003 020f 	and.w	r2, r3, #15
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	440a      	add	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40013800 	.word	0x40013800
 8002b4c:	51eb851f 	.word	0x51eb851f

08002b50 <__errno>:
 8002b50:	4b01      	ldr	r3, [pc, #4]	; (8002b58 <__errno+0x8>)
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	2000000c 	.word	0x2000000c

08002b5c <__libc_init_array>:
 8002b5c:	b570      	push	{r4, r5, r6, lr}
 8002b5e:	2600      	movs	r6, #0
 8002b60:	4d0c      	ldr	r5, [pc, #48]	; (8002b94 <__libc_init_array+0x38>)
 8002b62:	4c0d      	ldr	r4, [pc, #52]	; (8002b98 <__libc_init_array+0x3c>)
 8002b64:	1b64      	subs	r4, r4, r5
 8002b66:	10a4      	asrs	r4, r4, #2
 8002b68:	42a6      	cmp	r6, r4
 8002b6a:	d109      	bne.n	8002b80 <__libc_init_array+0x24>
 8002b6c:	f000 fff8 	bl	8003b60 <_init>
 8002b70:	2600      	movs	r6, #0
 8002b72:	4d0a      	ldr	r5, [pc, #40]	; (8002b9c <__libc_init_array+0x40>)
 8002b74:	4c0a      	ldr	r4, [pc, #40]	; (8002ba0 <__libc_init_array+0x44>)
 8002b76:	1b64      	subs	r4, r4, r5
 8002b78:	10a4      	asrs	r4, r4, #2
 8002b7a:	42a6      	cmp	r6, r4
 8002b7c:	d105      	bne.n	8002b8a <__libc_init_array+0x2e>
 8002b7e:	bd70      	pop	{r4, r5, r6, pc}
 8002b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b84:	4798      	blx	r3
 8002b86:	3601      	adds	r6, #1
 8002b88:	e7ee      	b.n	8002b68 <__libc_init_array+0xc>
 8002b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b8e:	4798      	blx	r3
 8002b90:	3601      	adds	r6, #1
 8002b92:	e7f2      	b.n	8002b7a <__libc_init_array+0x1e>
 8002b94:	08003d1c 	.word	0x08003d1c
 8002b98:	08003d1c 	.word	0x08003d1c
 8002b9c:	08003d1c 	.word	0x08003d1c
 8002ba0:	08003d20 	.word	0x08003d20

08002ba4 <memset>:
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4402      	add	r2, r0
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d100      	bne.n	8002bae <memset+0xa>
 8002bac:	4770      	bx	lr
 8002bae:	f803 1b01 	strb.w	r1, [r3], #1
 8002bb2:	e7f9      	b.n	8002ba8 <memset+0x4>

08002bb4 <iprintf>:
 8002bb4:	b40f      	push	{r0, r1, r2, r3}
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <iprintf+0x2c>)
 8002bb8:	b513      	push	{r0, r1, r4, lr}
 8002bba:	681c      	ldr	r4, [r3, #0]
 8002bbc:	b124      	cbz	r4, 8002bc8 <iprintf+0x14>
 8002bbe:	69a3      	ldr	r3, [r4, #24]
 8002bc0:	b913      	cbnz	r3, 8002bc8 <iprintf+0x14>
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f000 fa5e 	bl	8003084 <__sinit>
 8002bc8:	ab05      	add	r3, sp, #20
 8002bca:	4620      	mov	r0, r4
 8002bcc:	9a04      	ldr	r2, [sp, #16]
 8002bce:	68a1      	ldr	r1, [r4, #8]
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	f000 fc29 	bl	8003428 <_vfiprintf_r>
 8002bd6:	b002      	add	sp, #8
 8002bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bdc:	b004      	add	sp, #16
 8002bde:	4770      	bx	lr
 8002be0:	2000000c 	.word	0x2000000c

08002be4 <_puts_r>:
 8002be4:	b570      	push	{r4, r5, r6, lr}
 8002be6:	460e      	mov	r6, r1
 8002be8:	4605      	mov	r5, r0
 8002bea:	b118      	cbz	r0, 8002bf4 <_puts_r+0x10>
 8002bec:	6983      	ldr	r3, [r0, #24]
 8002bee:	b90b      	cbnz	r3, 8002bf4 <_puts_r+0x10>
 8002bf0:	f000 fa48 	bl	8003084 <__sinit>
 8002bf4:	69ab      	ldr	r3, [r5, #24]
 8002bf6:	68ac      	ldr	r4, [r5, #8]
 8002bf8:	b913      	cbnz	r3, 8002c00 <_puts_r+0x1c>
 8002bfa:	4628      	mov	r0, r5
 8002bfc:	f000 fa42 	bl	8003084 <__sinit>
 8002c00:	4b2c      	ldr	r3, [pc, #176]	; (8002cb4 <_puts_r+0xd0>)
 8002c02:	429c      	cmp	r4, r3
 8002c04:	d120      	bne.n	8002c48 <_puts_r+0x64>
 8002c06:	686c      	ldr	r4, [r5, #4]
 8002c08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c0a:	07db      	lsls	r3, r3, #31
 8002c0c:	d405      	bmi.n	8002c1a <_puts_r+0x36>
 8002c0e:	89a3      	ldrh	r3, [r4, #12]
 8002c10:	0598      	lsls	r0, r3, #22
 8002c12:	d402      	bmi.n	8002c1a <_puts_r+0x36>
 8002c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c16:	f000 fad3 	bl	80031c0 <__retarget_lock_acquire_recursive>
 8002c1a:	89a3      	ldrh	r3, [r4, #12]
 8002c1c:	0719      	lsls	r1, r3, #28
 8002c1e:	d51d      	bpl.n	8002c5c <_puts_r+0x78>
 8002c20:	6923      	ldr	r3, [r4, #16]
 8002c22:	b1db      	cbz	r3, 8002c5c <_puts_r+0x78>
 8002c24:	3e01      	subs	r6, #1
 8002c26:	68a3      	ldr	r3, [r4, #8]
 8002c28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	60a3      	str	r3, [r4, #8]
 8002c30:	bb39      	cbnz	r1, 8002c82 <_puts_r+0x9e>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	da38      	bge.n	8002ca8 <_puts_r+0xc4>
 8002c36:	4622      	mov	r2, r4
 8002c38:	210a      	movs	r1, #10
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f000 f848 	bl	8002cd0 <__swbuf_r>
 8002c40:	3001      	adds	r0, #1
 8002c42:	d011      	beq.n	8002c68 <_puts_r+0x84>
 8002c44:	250a      	movs	r5, #10
 8002c46:	e011      	b.n	8002c6c <_puts_r+0x88>
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <_puts_r+0xd4>)
 8002c4a:	429c      	cmp	r4, r3
 8002c4c:	d101      	bne.n	8002c52 <_puts_r+0x6e>
 8002c4e:	68ac      	ldr	r4, [r5, #8]
 8002c50:	e7da      	b.n	8002c08 <_puts_r+0x24>
 8002c52:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <_puts_r+0xd8>)
 8002c54:	429c      	cmp	r4, r3
 8002c56:	bf08      	it	eq
 8002c58:	68ec      	ldreq	r4, [r5, #12]
 8002c5a:	e7d5      	b.n	8002c08 <_puts_r+0x24>
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	4628      	mov	r0, r5
 8002c60:	f000 f888 	bl	8002d74 <__swsetup_r>
 8002c64:	2800      	cmp	r0, #0
 8002c66:	d0dd      	beq.n	8002c24 <_puts_r+0x40>
 8002c68:	f04f 35ff 	mov.w	r5, #4294967295
 8002c6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c6e:	07da      	lsls	r2, r3, #31
 8002c70:	d405      	bmi.n	8002c7e <_puts_r+0x9a>
 8002c72:	89a3      	ldrh	r3, [r4, #12]
 8002c74:	059b      	lsls	r3, r3, #22
 8002c76:	d402      	bmi.n	8002c7e <_puts_r+0x9a>
 8002c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c7a:	f000 faa2 	bl	80031c2 <__retarget_lock_release_recursive>
 8002c7e:	4628      	mov	r0, r5
 8002c80:	bd70      	pop	{r4, r5, r6, pc}
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	da04      	bge.n	8002c90 <_puts_r+0xac>
 8002c86:	69a2      	ldr	r2, [r4, #24]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	dc06      	bgt.n	8002c9a <_puts_r+0xb6>
 8002c8c:	290a      	cmp	r1, #10
 8002c8e:	d004      	beq.n	8002c9a <_puts_r+0xb6>
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	6022      	str	r2, [r4, #0]
 8002c96:	7019      	strb	r1, [r3, #0]
 8002c98:	e7c5      	b.n	8002c26 <_puts_r+0x42>
 8002c9a:	4622      	mov	r2, r4
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	f000 f817 	bl	8002cd0 <__swbuf_r>
 8002ca2:	3001      	adds	r0, #1
 8002ca4:	d1bf      	bne.n	8002c26 <_puts_r+0x42>
 8002ca6:	e7df      	b.n	8002c68 <_puts_r+0x84>
 8002ca8:	250a      	movs	r5, #10
 8002caa:	6823      	ldr	r3, [r4, #0]
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	6022      	str	r2, [r4, #0]
 8002cb0:	701d      	strb	r5, [r3, #0]
 8002cb2:	e7db      	b.n	8002c6c <_puts_r+0x88>
 8002cb4:	08003ca8 	.word	0x08003ca8
 8002cb8:	08003cc8 	.word	0x08003cc8
 8002cbc:	08003c88 	.word	0x08003c88

08002cc0 <puts>:
 8002cc0:	4b02      	ldr	r3, [pc, #8]	; (8002ccc <puts+0xc>)
 8002cc2:	4601      	mov	r1, r0
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	f7ff bf8d 	b.w	8002be4 <_puts_r>
 8002cca:	bf00      	nop
 8002ccc:	2000000c 	.word	0x2000000c

08002cd0 <__swbuf_r>:
 8002cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd2:	460e      	mov	r6, r1
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	4605      	mov	r5, r0
 8002cd8:	b118      	cbz	r0, 8002ce2 <__swbuf_r+0x12>
 8002cda:	6983      	ldr	r3, [r0, #24]
 8002cdc:	b90b      	cbnz	r3, 8002ce2 <__swbuf_r+0x12>
 8002cde:	f000 f9d1 	bl	8003084 <__sinit>
 8002ce2:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <__swbuf_r+0x98>)
 8002ce4:	429c      	cmp	r4, r3
 8002ce6:	d12b      	bne.n	8002d40 <__swbuf_r+0x70>
 8002ce8:	686c      	ldr	r4, [r5, #4]
 8002cea:	69a3      	ldr	r3, [r4, #24]
 8002cec:	60a3      	str	r3, [r4, #8]
 8002cee:	89a3      	ldrh	r3, [r4, #12]
 8002cf0:	071a      	lsls	r2, r3, #28
 8002cf2:	d52f      	bpl.n	8002d54 <__swbuf_r+0x84>
 8002cf4:	6923      	ldr	r3, [r4, #16]
 8002cf6:	b36b      	cbz	r3, 8002d54 <__swbuf_r+0x84>
 8002cf8:	6923      	ldr	r3, [r4, #16]
 8002cfa:	6820      	ldr	r0, [r4, #0]
 8002cfc:	b2f6      	uxtb	r6, r6
 8002cfe:	1ac0      	subs	r0, r0, r3
 8002d00:	6963      	ldr	r3, [r4, #20]
 8002d02:	4637      	mov	r7, r6
 8002d04:	4283      	cmp	r3, r0
 8002d06:	dc04      	bgt.n	8002d12 <__swbuf_r+0x42>
 8002d08:	4621      	mov	r1, r4
 8002d0a:	4628      	mov	r0, r5
 8002d0c:	f000 f926 	bl	8002f5c <_fflush_r>
 8002d10:	bb30      	cbnz	r0, 8002d60 <__swbuf_r+0x90>
 8002d12:	68a3      	ldr	r3, [r4, #8]
 8002d14:	3001      	adds	r0, #1
 8002d16:	3b01      	subs	r3, #1
 8002d18:	60a3      	str	r3, [r4, #8]
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	6022      	str	r2, [r4, #0]
 8002d20:	701e      	strb	r6, [r3, #0]
 8002d22:	6963      	ldr	r3, [r4, #20]
 8002d24:	4283      	cmp	r3, r0
 8002d26:	d004      	beq.n	8002d32 <__swbuf_r+0x62>
 8002d28:	89a3      	ldrh	r3, [r4, #12]
 8002d2a:	07db      	lsls	r3, r3, #31
 8002d2c:	d506      	bpl.n	8002d3c <__swbuf_r+0x6c>
 8002d2e:	2e0a      	cmp	r6, #10
 8002d30:	d104      	bne.n	8002d3c <__swbuf_r+0x6c>
 8002d32:	4621      	mov	r1, r4
 8002d34:	4628      	mov	r0, r5
 8002d36:	f000 f911 	bl	8002f5c <_fflush_r>
 8002d3a:	b988      	cbnz	r0, 8002d60 <__swbuf_r+0x90>
 8002d3c:	4638      	mov	r0, r7
 8002d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d40:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <__swbuf_r+0x9c>)
 8002d42:	429c      	cmp	r4, r3
 8002d44:	d101      	bne.n	8002d4a <__swbuf_r+0x7a>
 8002d46:	68ac      	ldr	r4, [r5, #8]
 8002d48:	e7cf      	b.n	8002cea <__swbuf_r+0x1a>
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <__swbuf_r+0xa0>)
 8002d4c:	429c      	cmp	r4, r3
 8002d4e:	bf08      	it	eq
 8002d50:	68ec      	ldreq	r4, [r5, #12]
 8002d52:	e7ca      	b.n	8002cea <__swbuf_r+0x1a>
 8002d54:	4621      	mov	r1, r4
 8002d56:	4628      	mov	r0, r5
 8002d58:	f000 f80c 	bl	8002d74 <__swsetup_r>
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	d0cb      	beq.n	8002cf8 <__swbuf_r+0x28>
 8002d60:	f04f 37ff 	mov.w	r7, #4294967295
 8002d64:	e7ea      	b.n	8002d3c <__swbuf_r+0x6c>
 8002d66:	bf00      	nop
 8002d68:	08003ca8 	.word	0x08003ca8
 8002d6c:	08003cc8 	.word	0x08003cc8
 8002d70:	08003c88 	.word	0x08003c88

08002d74 <__swsetup_r>:
 8002d74:	4b32      	ldr	r3, [pc, #200]	; (8002e40 <__swsetup_r+0xcc>)
 8002d76:	b570      	push	{r4, r5, r6, lr}
 8002d78:	681d      	ldr	r5, [r3, #0]
 8002d7a:	4606      	mov	r6, r0
 8002d7c:	460c      	mov	r4, r1
 8002d7e:	b125      	cbz	r5, 8002d8a <__swsetup_r+0x16>
 8002d80:	69ab      	ldr	r3, [r5, #24]
 8002d82:	b913      	cbnz	r3, 8002d8a <__swsetup_r+0x16>
 8002d84:	4628      	mov	r0, r5
 8002d86:	f000 f97d 	bl	8003084 <__sinit>
 8002d8a:	4b2e      	ldr	r3, [pc, #184]	; (8002e44 <__swsetup_r+0xd0>)
 8002d8c:	429c      	cmp	r4, r3
 8002d8e:	d10f      	bne.n	8002db0 <__swsetup_r+0x3c>
 8002d90:	686c      	ldr	r4, [r5, #4]
 8002d92:	89a3      	ldrh	r3, [r4, #12]
 8002d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d98:	0719      	lsls	r1, r3, #28
 8002d9a:	d42c      	bmi.n	8002df6 <__swsetup_r+0x82>
 8002d9c:	06dd      	lsls	r5, r3, #27
 8002d9e:	d411      	bmi.n	8002dc4 <__swsetup_r+0x50>
 8002da0:	2309      	movs	r3, #9
 8002da2:	6033      	str	r3, [r6, #0]
 8002da4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	81a3      	strh	r3, [r4, #12]
 8002dae:	e03e      	b.n	8002e2e <__swsetup_r+0xba>
 8002db0:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <__swsetup_r+0xd4>)
 8002db2:	429c      	cmp	r4, r3
 8002db4:	d101      	bne.n	8002dba <__swsetup_r+0x46>
 8002db6:	68ac      	ldr	r4, [r5, #8]
 8002db8:	e7eb      	b.n	8002d92 <__swsetup_r+0x1e>
 8002dba:	4b24      	ldr	r3, [pc, #144]	; (8002e4c <__swsetup_r+0xd8>)
 8002dbc:	429c      	cmp	r4, r3
 8002dbe:	bf08      	it	eq
 8002dc0:	68ec      	ldreq	r4, [r5, #12]
 8002dc2:	e7e6      	b.n	8002d92 <__swsetup_r+0x1e>
 8002dc4:	0758      	lsls	r0, r3, #29
 8002dc6:	d512      	bpl.n	8002dee <__swsetup_r+0x7a>
 8002dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dca:	b141      	cbz	r1, 8002dde <__swsetup_r+0x6a>
 8002dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002dd0:	4299      	cmp	r1, r3
 8002dd2:	d002      	beq.n	8002dda <__swsetup_r+0x66>
 8002dd4:	4630      	mov	r0, r6
 8002dd6:	f000 fa59 	bl	800328c <_free_r>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	6363      	str	r3, [r4, #52]	; 0x34
 8002dde:	89a3      	ldrh	r3, [r4, #12]
 8002de0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002de4:	81a3      	strh	r3, [r4, #12]
 8002de6:	2300      	movs	r3, #0
 8002de8:	6063      	str	r3, [r4, #4]
 8002dea:	6923      	ldr	r3, [r4, #16]
 8002dec:	6023      	str	r3, [r4, #0]
 8002dee:	89a3      	ldrh	r3, [r4, #12]
 8002df0:	f043 0308 	orr.w	r3, r3, #8
 8002df4:	81a3      	strh	r3, [r4, #12]
 8002df6:	6923      	ldr	r3, [r4, #16]
 8002df8:	b94b      	cbnz	r3, 8002e0e <__swsetup_r+0x9a>
 8002dfa:	89a3      	ldrh	r3, [r4, #12]
 8002dfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e04:	d003      	beq.n	8002e0e <__swsetup_r+0x9a>
 8002e06:	4621      	mov	r1, r4
 8002e08:	4630      	mov	r0, r6
 8002e0a:	f000 f9ff 	bl	800320c <__smakebuf_r>
 8002e0e:	89a0      	ldrh	r0, [r4, #12]
 8002e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e14:	f010 0301 	ands.w	r3, r0, #1
 8002e18:	d00a      	beq.n	8002e30 <__swsetup_r+0xbc>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60a3      	str	r3, [r4, #8]
 8002e1e:	6963      	ldr	r3, [r4, #20]
 8002e20:	425b      	negs	r3, r3
 8002e22:	61a3      	str	r3, [r4, #24]
 8002e24:	6923      	ldr	r3, [r4, #16]
 8002e26:	b943      	cbnz	r3, 8002e3a <__swsetup_r+0xc6>
 8002e28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e2c:	d1ba      	bne.n	8002da4 <__swsetup_r+0x30>
 8002e2e:	bd70      	pop	{r4, r5, r6, pc}
 8002e30:	0781      	lsls	r1, r0, #30
 8002e32:	bf58      	it	pl
 8002e34:	6963      	ldrpl	r3, [r4, #20]
 8002e36:	60a3      	str	r3, [r4, #8]
 8002e38:	e7f4      	b.n	8002e24 <__swsetup_r+0xb0>
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	e7f7      	b.n	8002e2e <__swsetup_r+0xba>
 8002e3e:	bf00      	nop
 8002e40:	2000000c 	.word	0x2000000c
 8002e44:	08003ca8 	.word	0x08003ca8
 8002e48:	08003cc8 	.word	0x08003cc8
 8002e4c:	08003c88 	.word	0x08003c88

08002e50 <__sflush_r>:
 8002e50:	898a      	ldrh	r2, [r1, #12]
 8002e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e56:	4605      	mov	r5, r0
 8002e58:	0710      	lsls	r0, r2, #28
 8002e5a:	460c      	mov	r4, r1
 8002e5c:	d458      	bmi.n	8002f10 <__sflush_r+0xc0>
 8002e5e:	684b      	ldr	r3, [r1, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	dc05      	bgt.n	8002e70 <__sflush_r+0x20>
 8002e64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	dc02      	bgt.n	8002e70 <__sflush_r+0x20>
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e72:	2e00      	cmp	r6, #0
 8002e74:	d0f9      	beq.n	8002e6a <__sflush_r+0x1a>
 8002e76:	2300      	movs	r3, #0
 8002e78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e7c:	682f      	ldr	r7, [r5, #0]
 8002e7e:	602b      	str	r3, [r5, #0]
 8002e80:	d032      	beq.n	8002ee8 <__sflush_r+0x98>
 8002e82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e84:	89a3      	ldrh	r3, [r4, #12]
 8002e86:	075a      	lsls	r2, r3, #29
 8002e88:	d505      	bpl.n	8002e96 <__sflush_r+0x46>
 8002e8a:	6863      	ldr	r3, [r4, #4]
 8002e8c:	1ac0      	subs	r0, r0, r3
 8002e8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e90:	b10b      	cbz	r3, 8002e96 <__sflush_r+0x46>
 8002e92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e94:	1ac0      	subs	r0, r0, r3
 8002e96:	2300      	movs	r3, #0
 8002e98:	4602      	mov	r2, r0
 8002e9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	6a21      	ldr	r1, [r4, #32]
 8002ea0:	47b0      	blx	r6
 8002ea2:	1c43      	adds	r3, r0, #1
 8002ea4:	89a3      	ldrh	r3, [r4, #12]
 8002ea6:	d106      	bne.n	8002eb6 <__sflush_r+0x66>
 8002ea8:	6829      	ldr	r1, [r5, #0]
 8002eaa:	291d      	cmp	r1, #29
 8002eac:	d82c      	bhi.n	8002f08 <__sflush_r+0xb8>
 8002eae:	4a2a      	ldr	r2, [pc, #168]	; (8002f58 <__sflush_r+0x108>)
 8002eb0:	40ca      	lsrs	r2, r1
 8002eb2:	07d6      	lsls	r6, r2, #31
 8002eb4:	d528      	bpl.n	8002f08 <__sflush_r+0xb8>
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	6062      	str	r2, [r4, #4]
 8002eba:	6922      	ldr	r2, [r4, #16]
 8002ebc:	04d9      	lsls	r1, r3, #19
 8002ebe:	6022      	str	r2, [r4, #0]
 8002ec0:	d504      	bpl.n	8002ecc <__sflush_r+0x7c>
 8002ec2:	1c42      	adds	r2, r0, #1
 8002ec4:	d101      	bne.n	8002eca <__sflush_r+0x7a>
 8002ec6:	682b      	ldr	r3, [r5, #0]
 8002ec8:	b903      	cbnz	r3, 8002ecc <__sflush_r+0x7c>
 8002eca:	6560      	str	r0, [r4, #84]	; 0x54
 8002ecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ece:	602f      	str	r7, [r5, #0]
 8002ed0:	2900      	cmp	r1, #0
 8002ed2:	d0ca      	beq.n	8002e6a <__sflush_r+0x1a>
 8002ed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ed8:	4299      	cmp	r1, r3
 8002eda:	d002      	beq.n	8002ee2 <__sflush_r+0x92>
 8002edc:	4628      	mov	r0, r5
 8002ede:	f000 f9d5 	bl	800328c <_free_r>
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	6360      	str	r0, [r4, #52]	; 0x34
 8002ee6:	e7c1      	b.n	8002e6c <__sflush_r+0x1c>
 8002ee8:	6a21      	ldr	r1, [r4, #32]
 8002eea:	2301      	movs	r3, #1
 8002eec:	4628      	mov	r0, r5
 8002eee:	47b0      	blx	r6
 8002ef0:	1c41      	adds	r1, r0, #1
 8002ef2:	d1c7      	bne.n	8002e84 <__sflush_r+0x34>
 8002ef4:	682b      	ldr	r3, [r5, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0c4      	beq.n	8002e84 <__sflush_r+0x34>
 8002efa:	2b1d      	cmp	r3, #29
 8002efc:	d001      	beq.n	8002f02 <__sflush_r+0xb2>
 8002efe:	2b16      	cmp	r3, #22
 8002f00:	d101      	bne.n	8002f06 <__sflush_r+0xb6>
 8002f02:	602f      	str	r7, [r5, #0]
 8002f04:	e7b1      	b.n	8002e6a <__sflush_r+0x1a>
 8002f06:	89a3      	ldrh	r3, [r4, #12]
 8002f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f0c:	81a3      	strh	r3, [r4, #12]
 8002f0e:	e7ad      	b.n	8002e6c <__sflush_r+0x1c>
 8002f10:	690f      	ldr	r7, [r1, #16]
 8002f12:	2f00      	cmp	r7, #0
 8002f14:	d0a9      	beq.n	8002e6a <__sflush_r+0x1a>
 8002f16:	0793      	lsls	r3, r2, #30
 8002f18:	bf18      	it	ne
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	680e      	ldr	r6, [r1, #0]
 8002f1e:	bf08      	it	eq
 8002f20:	694b      	ldreq	r3, [r1, #20]
 8002f22:	eba6 0807 	sub.w	r8, r6, r7
 8002f26:	600f      	str	r7, [r1, #0]
 8002f28:	608b      	str	r3, [r1, #8]
 8002f2a:	f1b8 0f00 	cmp.w	r8, #0
 8002f2e:	dd9c      	ble.n	8002e6a <__sflush_r+0x1a>
 8002f30:	4643      	mov	r3, r8
 8002f32:	463a      	mov	r2, r7
 8002f34:	4628      	mov	r0, r5
 8002f36:	6a21      	ldr	r1, [r4, #32]
 8002f38:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f3a:	47b0      	blx	r6
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	dc06      	bgt.n	8002f4e <__sflush_r+0xfe>
 8002f40:	89a3      	ldrh	r3, [r4, #12]
 8002f42:	f04f 30ff 	mov.w	r0, #4294967295
 8002f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f4a:	81a3      	strh	r3, [r4, #12]
 8002f4c:	e78e      	b.n	8002e6c <__sflush_r+0x1c>
 8002f4e:	4407      	add	r7, r0
 8002f50:	eba8 0800 	sub.w	r8, r8, r0
 8002f54:	e7e9      	b.n	8002f2a <__sflush_r+0xda>
 8002f56:	bf00      	nop
 8002f58:	20400001 	.word	0x20400001

08002f5c <_fflush_r>:
 8002f5c:	b538      	push	{r3, r4, r5, lr}
 8002f5e:	690b      	ldr	r3, [r1, #16]
 8002f60:	4605      	mov	r5, r0
 8002f62:	460c      	mov	r4, r1
 8002f64:	b913      	cbnz	r3, 8002f6c <_fflush_r+0x10>
 8002f66:	2500      	movs	r5, #0
 8002f68:	4628      	mov	r0, r5
 8002f6a:	bd38      	pop	{r3, r4, r5, pc}
 8002f6c:	b118      	cbz	r0, 8002f76 <_fflush_r+0x1a>
 8002f6e:	6983      	ldr	r3, [r0, #24]
 8002f70:	b90b      	cbnz	r3, 8002f76 <_fflush_r+0x1a>
 8002f72:	f000 f887 	bl	8003084 <__sinit>
 8002f76:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <_fflush_r+0x6c>)
 8002f78:	429c      	cmp	r4, r3
 8002f7a:	d11b      	bne.n	8002fb4 <_fflush_r+0x58>
 8002f7c:	686c      	ldr	r4, [r5, #4]
 8002f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0ef      	beq.n	8002f66 <_fflush_r+0xa>
 8002f86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f88:	07d0      	lsls	r0, r2, #31
 8002f8a:	d404      	bmi.n	8002f96 <_fflush_r+0x3a>
 8002f8c:	0599      	lsls	r1, r3, #22
 8002f8e:	d402      	bmi.n	8002f96 <_fflush_r+0x3a>
 8002f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f92:	f000 f915 	bl	80031c0 <__retarget_lock_acquire_recursive>
 8002f96:	4628      	mov	r0, r5
 8002f98:	4621      	mov	r1, r4
 8002f9a:	f7ff ff59 	bl	8002e50 <__sflush_r>
 8002f9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fa0:	4605      	mov	r5, r0
 8002fa2:	07da      	lsls	r2, r3, #31
 8002fa4:	d4e0      	bmi.n	8002f68 <_fflush_r+0xc>
 8002fa6:	89a3      	ldrh	r3, [r4, #12]
 8002fa8:	059b      	lsls	r3, r3, #22
 8002faa:	d4dd      	bmi.n	8002f68 <_fflush_r+0xc>
 8002fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fae:	f000 f908 	bl	80031c2 <__retarget_lock_release_recursive>
 8002fb2:	e7d9      	b.n	8002f68 <_fflush_r+0xc>
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <_fflush_r+0x70>)
 8002fb6:	429c      	cmp	r4, r3
 8002fb8:	d101      	bne.n	8002fbe <_fflush_r+0x62>
 8002fba:	68ac      	ldr	r4, [r5, #8]
 8002fbc:	e7df      	b.n	8002f7e <_fflush_r+0x22>
 8002fbe:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <_fflush_r+0x74>)
 8002fc0:	429c      	cmp	r4, r3
 8002fc2:	bf08      	it	eq
 8002fc4:	68ec      	ldreq	r4, [r5, #12]
 8002fc6:	e7da      	b.n	8002f7e <_fflush_r+0x22>
 8002fc8:	08003ca8 	.word	0x08003ca8
 8002fcc:	08003cc8 	.word	0x08003cc8
 8002fd0:	08003c88 	.word	0x08003c88

08002fd4 <std>:
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	b510      	push	{r4, lr}
 8002fd8:	4604      	mov	r4, r0
 8002fda:	e9c0 3300 	strd	r3, r3, [r0]
 8002fde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fe2:	6083      	str	r3, [r0, #8]
 8002fe4:	8181      	strh	r1, [r0, #12]
 8002fe6:	6643      	str	r3, [r0, #100]	; 0x64
 8002fe8:	81c2      	strh	r2, [r0, #14]
 8002fea:	6183      	str	r3, [r0, #24]
 8002fec:	4619      	mov	r1, r3
 8002fee:	2208      	movs	r2, #8
 8002ff0:	305c      	adds	r0, #92	; 0x5c
 8002ff2:	f7ff fdd7 	bl	8002ba4 <memset>
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <std+0x38>)
 8002ff8:	6224      	str	r4, [r4, #32]
 8002ffa:	6263      	str	r3, [r4, #36]	; 0x24
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <std+0x3c>)
 8002ffe:	62a3      	str	r3, [r4, #40]	; 0x28
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <std+0x40>)
 8003002:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <std+0x44>)
 8003006:	6323      	str	r3, [r4, #48]	; 0x30
 8003008:	bd10      	pop	{r4, pc}
 800300a:	bf00      	nop
 800300c:	080039d5 	.word	0x080039d5
 8003010:	080039f7 	.word	0x080039f7
 8003014:	08003a2f 	.word	0x08003a2f
 8003018:	08003a53 	.word	0x08003a53

0800301c <_cleanup_r>:
 800301c:	4901      	ldr	r1, [pc, #4]	; (8003024 <_cleanup_r+0x8>)
 800301e:	f000 b8af 	b.w	8003180 <_fwalk_reent>
 8003022:	bf00      	nop
 8003024:	08002f5d 	.word	0x08002f5d

08003028 <__sfmoreglue>:
 8003028:	b570      	push	{r4, r5, r6, lr}
 800302a:	2568      	movs	r5, #104	; 0x68
 800302c:	1e4a      	subs	r2, r1, #1
 800302e:	4355      	muls	r5, r2
 8003030:	460e      	mov	r6, r1
 8003032:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003036:	f000 f975 	bl	8003324 <_malloc_r>
 800303a:	4604      	mov	r4, r0
 800303c:	b140      	cbz	r0, 8003050 <__sfmoreglue+0x28>
 800303e:	2100      	movs	r1, #0
 8003040:	e9c0 1600 	strd	r1, r6, [r0]
 8003044:	300c      	adds	r0, #12
 8003046:	60a0      	str	r0, [r4, #8]
 8003048:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800304c:	f7ff fdaa 	bl	8002ba4 <memset>
 8003050:	4620      	mov	r0, r4
 8003052:	bd70      	pop	{r4, r5, r6, pc}

08003054 <__sfp_lock_acquire>:
 8003054:	4801      	ldr	r0, [pc, #4]	; (800305c <__sfp_lock_acquire+0x8>)
 8003056:	f000 b8b3 	b.w	80031c0 <__retarget_lock_acquire_recursive>
 800305a:	bf00      	nop
 800305c:	20000188 	.word	0x20000188

08003060 <__sfp_lock_release>:
 8003060:	4801      	ldr	r0, [pc, #4]	; (8003068 <__sfp_lock_release+0x8>)
 8003062:	f000 b8ae 	b.w	80031c2 <__retarget_lock_release_recursive>
 8003066:	bf00      	nop
 8003068:	20000188 	.word	0x20000188

0800306c <__sinit_lock_acquire>:
 800306c:	4801      	ldr	r0, [pc, #4]	; (8003074 <__sinit_lock_acquire+0x8>)
 800306e:	f000 b8a7 	b.w	80031c0 <__retarget_lock_acquire_recursive>
 8003072:	bf00      	nop
 8003074:	20000183 	.word	0x20000183

08003078 <__sinit_lock_release>:
 8003078:	4801      	ldr	r0, [pc, #4]	; (8003080 <__sinit_lock_release+0x8>)
 800307a:	f000 b8a2 	b.w	80031c2 <__retarget_lock_release_recursive>
 800307e:	bf00      	nop
 8003080:	20000183 	.word	0x20000183

08003084 <__sinit>:
 8003084:	b510      	push	{r4, lr}
 8003086:	4604      	mov	r4, r0
 8003088:	f7ff fff0 	bl	800306c <__sinit_lock_acquire>
 800308c:	69a3      	ldr	r3, [r4, #24]
 800308e:	b11b      	cbz	r3, 8003098 <__sinit+0x14>
 8003090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003094:	f7ff bff0 	b.w	8003078 <__sinit_lock_release>
 8003098:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800309c:	6523      	str	r3, [r4, #80]	; 0x50
 800309e:	4b13      	ldr	r3, [pc, #76]	; (80030ec <__sinit+0x68>)
 80030a0:	4a13      	ldr	r2, [pc, #76]	; (80030f0 <__sinit+0x6c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80030a6:	42a3      	cmp	r3, r4
 80030a8:	bf08      	it	eq
 80030aa:	2301      	moveq	r3, #1
 80030ac:	4620      	mov	r0, r4
 80030ae:	bf08      	it	eq
 80030b0:	61a3      	streq	r3, [r4, #24]
 80030b2:	f000 f81f 	bl	80030f4 <__sfp>
 80030b6:	6060      	str	r0, [r4, #4]
 80030b8:	4620      	mov	r0, r4
 80030ba:	f000 f81b 	bl	80030f4 <__sfp>
 80030be:	60a0      	str	r0, [r4, #8]
 80030c0:	4620      	mov	r0, r4
 80030c2:	f000 f817 	bl	80030f4 <__sfp>
 80030c6:	2200      	movs	r2, #0
 80030c8:	2104      	movs	r1, #4
 80030ca:	60e0      	str	r0, [r4, #12]
 80030cc:	6860      	ldr	r0, [r4, #4]
 80030ce:	f7ff ff81 	bl	8002fd4 <std>
 80030d2:	2201      	movs	r2, #1
 80030d4:	2109      	movs	r1, #9
 80030d6:	68a0      	ldr	r0, [r4, #8]
 80030d8:	f7ff ff7c 	bl	8002fd4 <std>
 80030dc:	2202      	movs	r2, #2
 80030de:	2112      	movs	r1, #18
 80030e0:	68e0      	ldr	r0, [r4, #12]
 80030e2:	f7ff ff77 	bl	8002fd4 <std>
 80030e6:	2301      	movs	r3, #1
 80030e8:	61a3      	str	r3, [r4, #24]
 80030ea:	e7d1      	b.n	8003090 <__sinit+0xc>
 80030ec:	08003c84 	.word	0x08003c84
 80030f0:	0800301d 	.word	0x0800301d

080030f4 <__sfp>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	4607      	mov	r7, r0
 80030f8:	f7ff ffac 	bl	8003054 <__sfp_lock_acquire>
 80030fc:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <__sfp+0x84>)
 80030fe:	681e      	ldr	r6, [r3, #0]
 8003100:	69b3      	ldr	r3, [r6, #24]
 8003102:	b913      	cbnz	r3, 800310a <__sfp+0x16>
 8003104:	4630      	mov	r0, r6
 8003106:	f7ff ffbd 	bl	8003084 <__sinit>
 800310a:	3648      	adds	r6, #72	; 0x48
 800310c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003110:	3b01      	subs	r3, #1
 8003112:	d503      	bpl.n	800311c <__sfp+0x28>
 8003114:	6833      	ldr	r3, [r6, #0]
 8003116:	b30b      	cbz	r3, 800315c <__sfp+0x68>
 8003118:	6836      	ldr	r6, [r6, #0]
 800311a:	e7f7      	b.n	800310c <__sfp+0x18>
 800311c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003120:	b9d5      	cbnz	r5, 8003158 <__sfp+0x64>
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <__sfp+0x88>)
 8003124:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003128:	60e3      	str	r3, [r4, #12]
 800312a:	6665      	str	r5, [r4, #100]	; 0x64
 800312c:	f000 f847 	bl	80031be <__retarget_lock_init_recursive>
 8003130:	f7ff ff96 	bl	8003060 <__sfp_lock_release>
 8003134:	2208      	movs	r2, #8
 8003136:	4629      	mov	r1, r5
 8003138:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800313c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003140:	6025      	str	r5, [r4, #0]
 8003142:	61a5      	str	r5, [r4, #24]
 8003144:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003148:	f7ff fd2c 	bl	8002ba4 <memset>
 800314c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003150:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003154:	4620      	mov	r0, r4
 8003156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003158:	3468      	adds	r4, #104	; 0x68
 800315a:	e7d9      	b.n	8003110 <__sfp+0x1c>
 800315c:	2104      	movs	r1, #4
 800315e:	4638      	mov	r0, r7
 8003160:	f7ff ff62 	bl	8003028 <__sfmoreglue>
 8003164:	4604      	mov	r4, r0
 8003166:	6030      	str	r0, [r6, #0]
 8003168:	2800      	cmp	r0, #0
 800316a:	d1d5      	bne.n	8003118 <__sfp+0x24>
 800316c:	f7ff ff78 	bl	8003060 <__sfp_lock_release>
 8003170:	230c      	movs	r3, #12
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	e7ee      	b.n	8003154 <__sfp+0x60>
 8003176:	bf00      	nop
 8003178:	08003c84 	.word	0x08003c84
 800317c:	ffff0001 	.word	0xffff0001

08003180 <_fwalk_reent>:
 8003180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003184:	4606      	mov	r6, r0
 8003186:	4688      	mov	r8, r1
 8003188:	2700      	movs	r7, #0
 800318a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800318e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003192:	f1b9 0901 	subs.w	r9, r9, #1
 8003196:	d505      	bpl.n	80031a4 <_fwalk_reent+0x24>
 8003198:	6824      	ldr	r4, [r4, #0]
 800319a:	2c00      	cmp	r4, #0
 800319c:	d1f7      	bne.n	800318e <_fwalk_reent+0xe>
 800319e:	4638      	mov	r0, r7
 80031a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031a4:	89ab      	ldrh	r3, [r5, #12]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d907      	bls.n	80031ba <_fwalk_reent+0x3a>
 80031aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031ae:	3301      	adds	r3, #1
 80031b0:	d003      	beq.n	80031ba <_fwalk_reent+0x3a>
 80031b2:	4629      	mov	r1, r5
 80031b4:	4630      	mov	r0, r6
 80031b6:	47c0      	blx	r8
 80031b8:	4307      	orrs	r7, r0
 80031ba:	3568      	adds	r5, #104	; 0x68
 80031bc:	e7e9      	b.n	8003192 <_fwalk_reent+0x12>

080031be <__retarget_lock_init_recursive>:
 80031be:	4770      	bx	lr

080031c0 <__retarget_lock_acquire_recursive>:
 80031c0:	4770      	bx	lr

080031c2 <__retarget_lock_release_recursive>:
 80031c2:	4770      	bx	lr

080031c4 <__swhatbuf_r>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	460e      	mov	r6, r1
 80031c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031cc:	4614      	mov	r4, r2
 80031ce:	2900      	cmp	r1, #0
 80031d0:	461d      	mov	r5, r3
 80031d2:	b096      	sub	sp, #88	; 0x58
 80031d4:	da07      	bge.n	80031e6 <__swhatbuf_r+0x22>
 80031d6:	2300      	movs	r3, #0
 80031d8:	602b      	str	r3, [r5, #0]
 80031da:	89b3      	ldrh	r3, [r6, #12]
 80031dc:	061a      	lsls	r2, r3, #24
 80031de:	d410      	bmi.n	8003202 <__swhatbuf_r+0x3e>
 80031e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031e4:	e00e      	b.n	8003204 <__swhatbuf_r+0x40>
 80031e6:	466a      	mov	r2, sp
 80031e8:	f000 fc5a 	bl	8003aa0 <_fstat_r>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	dbf2      	blt.n	80031d6 <__swhatbuf_r+0x12>
 80031f0:	9a01      	ldr	r2, [sp, #4]
 80031f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80031f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80031fa:	425a      	negs	r2, r3
 80031fc:	415a      	adcs	r2, r3
 80031fe:	602a      	str	r2, [r5, #0]
 8003200:	e7ee      	b.n	80031e0 <__swhatbuf_r+0x1c>
 8003202:	2340      	movs	r3, #64	; 0x40
 8003204:	2000      	movs	r0, #0
 8003206:	6023      	str	r3, [r4, #0]
 8003208:	b016      	add	sp, #88	; 0x58
 800320a:	bd70      	pop	{r4, r5, r6, pc}

0800320c <__smakebuf_r>:
 800320c:	898b      	ldrh	r3, [r1, #12]
 800320e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003210:	079d      	lsls	r5, r3, #30
 8003212:	4606      	mov	r6, r0
 8003214:	460c      	mov	r4, r1
 8003216:	d507      	bpl.n	8003228 <__smakebuf_r+0x1c>
 8003218:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800321c:	6023      	str	r3, [r4, #0]
 800321e:	6123      	str	r3, [r4, #16]
 8003220:	2301      	movs	r3, #1
 8003222:	6163      	str	r3, [r4, #20]
 8003224:	b002      	add	sp, #8
 8003226:	bd70      	pop	{r4, r5, r6, pc}
 8003228:	466a      	mov	r2, sp
 800322a:	ab01      	add	r3, sp, #4
 800322c:	f7ff ffca 	bl	80031c4 <__swhatbuf_r>
 8003230:	9900      	ldr	r1, [sp, #0]
 8003232:	4605      	mov	r5, r0
 8003234:	4630      	mov	r0, r6
 8003236:	f000 f875 	bl	8003324 <_malloc_r>
 800323a:	b948      	cbnz	r0, 8003250 <__smakebuf_r+0x44>
 800323c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003240:	059a      	lsls	r2, r3, #22
 8003242:	d4ef      	bmi.n	8003224 <__smakebuf_r+0x18>
 8003244:	f023 0303 	bic.w	r3, r3, #3
 8003248:	f043 0302 	orr.w	r3, r3, #2
 800324c:	81a3      	strh	r3, [r4, #12]
 800324e:	e7e3      	b.n	8003218 <__smakebuf_r+0xc>
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <__smakebuf_r+0x7c>)
 8003252:	62b3      	str	r3, [r6, #40]	; 0x28
 8003254:	89a3      	ldrh	r3, [r4, #12]
 8003256:	6020      	str	r0, [r4, #0]
 8003258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800325c:	81a3      	strh	r3, [r4, #12]
 800325e:	9b00      	ldr	r3, [sp, #0]
 8003260:	6120      	str	r0, [r4, #16]
 8003262:	6163      	str	r3, [r4, #20]
 8003264:	9b01      	ldr	r3, [sp, #4]
 8003266:	b15b      	cbz	r3, 8003280 <__smakebuf_r+0x74>
 8003268:	4630      	mov	r0, r6
 800326a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800326e:	f000 fc29 	bl	8003ac4 <_isatty_r>
 8003272:	b128      	cbz	r0, 8003280 <__smakebuf_r+0x74>
 8003274:	89a3      	ldrh	r3, [r4, #12]
 8003276:	f023 0303 	bic.w	r3, r3, #3
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	81a3      	strh	r3, [r4, #12]
 8003280:	89a0      	ldrh	r0, [r4, #12]
 8003282:	4305      	orrs	r5, r0
 8003284:	81a5      	strh	r5, [r4, #12]
 8003286:	e7cd      	b.n	8003224 <__smakebuf_r+0x18>
 8003288:	0800301d 	.word	0x0800301d

0800328c <_free_r>:
 800328c:	b538      	push	{r3, r4, r5, lr}
 800328e:	4605      	mov	r5, r0
 8003290:	2900      	cmp	r1, #0
 8003292:	d043      	beq.n	800331c <_free_r+0x90>
 8003294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003298:	1f0c      	subs	r4, r1, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	bfb8      	it	lt
 800329e:	18e4      	addlt	r4, r4, r3
 80032a0:	f000 fc40 	bl	8003b24 <__malloc_lock>
 80032a4:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <_free_r+0x94>)
 80032a6:	6813      	ldr	r3, [r2, #0]
 80032a8:	4610      	mov	r0, r2
 80032aa:	b933      	cbnz	r3, 80032ba <_free_r+0x2e>
 80032ac:	6063      	str	r3, [r4, #4]
 80032ae:	6014      	str	r4, [r2, #0]
 80032b0:	4628      	mov	r0, r5
 80032b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032b6:	f000 bc3b 	b.w	8003b30 <__malloc_unlock>
 80032ba:	42a3      	cmp	r3, r4
 80032bc:	d90a      	bls.n	80032d4 <_free_r+0x48>
 80032be:	6821      	ldr	r1, [r4, #0]
 80032c0:	1862      	adds	r2, r4, r1
 80032c2:	4293      	cmp	r3, r2
 80032c4:	bf01      	itttt	eq
 80032c6:	681a      	ldreq	r2, [r3, #0]
 80032c8:	685b      	ldreq	r3, [r3, #4]
 80032ca:	1852      	addeq	r2, r2, r1
 80032cc:	6022      	streq	r2, [r4, #0]
 80032ce:	6063      	str	r3, [r4, #4]
 80032d0:	6004      	str	r4, [r0, #0]
 80032d2:	e7ed      	b.n	80032b0 <_free_r+0x24>
 80032d4:	461a      	mov	r2, r3
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	b10b      	cbz	r3, 80032de <_free_r+0x52>
 80032da:	42a3      	cmp	r3, r4
 80032dc:	d9fa      	bls.n	80032d4 <_free_r+0x48>
 80032de:	6811      	ldr	r1, [r2, #0]
 80032e0:	1850      	adds	r0, r2, r1
 80032e2:	42a0      	cmp	r0, r4
 80032e4:	d10b      	bne.n	80032fe <_free_r+0x72>
 80032e6:	6820      	ldr	r0, [r4, #0]
 80032e8:	4401      	add	r1, r0
 80032ea:	1850      	adds	r0, r2, r1
 80032ec:	4283      	cmp	r3, r0
 80032ee:	6011      	str	r1, [r2, #0]
 80032f0:	d1de      	bne.n	80032b0 <_free_r+0x24>
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4401      	add	r1, r0
 80032f8:	6011      	str	r1, [r2, #0]
 80032fa:	6053      	str	r3, [r2, #4]
 80032fc:	e7d8      	b.n	80032b0 <_free_r+0x24>
 80032fe:	d902      	bls.n	8003306 <_free_r+0x7a>
 8003300:	230c      	movs	r3, #12
 8003302:	602b      	str	r3, [r5, #0]
 8003304:	e7d4      	b.n	80032b0 <_free_r+0x24>
 8003306:	6820      	ldr	r0, [r4, #0]
 8003308:	1821      	adds	r1, r4, r0
 800330a:	428b      	cmp	r3, r1
 800330c:	bf01      	itttt	eq
 800330e:	6819      	ldreq	r1, [r3, #0]
 8003310:	685b      	ldreq	r3, [r3, #4]
 8003312:	1809      	addeq	r1, r1, r0
 8003314:	6021      	streq	r1, [r4, #0]
 8003316:	6063      	str	r3, [r4, #4]
 8003318:	6054      	str	r4, [r2, #4]
 800331a:	e7c9      	b.n	80032b0 <_free_r+0x24>
 800331c:	bd38      	pop	{r3, r4, r5, pc}
 800331e:	bf00      	nop
 8003320:	20000094 	.word	0x20000094

08003324 <_malloc_r>:
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003326:	1ccd      	adds	r5, r1, #3
 8003328:	f025 0503 	bic.w	r5, r5, #3
 800332c:	3508      	adds	r5, #8
 800332e:	2d0c      	cmp	r5, #12
 8003330:	bf38      	it	cc
 8003332:	250c      	movcc	r5, #12
 8003334:	2d00      	cmp	r5, #0
 8003336:	4606      	mov	r6, r0
 8003338:	db01      	blt.n	800333e <_malloc_r+0x1a>
 800333a:	42a9      	cmp	r1, r5
 800333c:	d903      	bls.n	8003346 <_malloc_r+0x22>
 800333e:	230c      	movs	r3, #12
 8003340:	6033      	str	r3, [r6, #0]
 8003342:	2000      	movs	r0, #0
 8003344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003346:	f000 fbed 	bl	8003b24 <__malloc_lock>
 800334a:	4921      	ldr	r1, [pc, #132]	; (80033d0 <_malloc_r+0xac>)
 800334c:	680a      	ldr	r2, [r1, #0]
 800334e:	4614      	mov	r4, r2
 8003350:	b99c      	cbnz	r4, 800337a <_malloc_r+0x56>
 8003352:	4f20      	ldr	r7, [pc, #128]	; (80033d4 <_malloc_r+0xb0>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	b923      	cbnz	r3, 8003362 <_malloc_r+0x3e>
 8003358:	4621      	mov	r1, r4
 800335a:	4630      	mov	r0, r6
 800335c:	f000 fb2a 	bl	80039b4 <_sbrk_r>
 8003360:	6038      	str	r0, [r7, #0]
 8003362:	4629      	mov	r1, r5
 8003364:	4630      	mov	r0, r6
 8003366:	f000 fb25 	bl	80039b4 <_sbrk_r>
 800336a:	1c43      	adds	r3, r0, #1
 800336c:	d123      	bne.n	80033b6 <_malloc_r+0x92>
 800336e:	230c      	movs	r3, #12
 8003370:	4630      	mov	r0, r6
 8003372:	6033      	str	r3, [r6, #0]
 8003374:	f000 fbdc 	bl	8003b30 <__malloc_unlock>
 8003378:	e7e3      	b.n	8003342 <_malloc_r+0x1e>
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	1b5b      	subs	r3, r3, r5
 800337e:	d417      	bmi.n	80033b0 <_malloc_r+0x8c>
 8003380:	2b0b      	cmp	r3, #11
 8003382:	d903      	bls.n	800338c <_malloc_r+0x68>
 8003384:	6023      	str	r3, [r4, #0]
 8003386:	441c      	add	r4, r3
 8003388:	6025      	str	r5, [r4, #0]
 800338a:	e004      	b.n	8003396 <_malloc_r+0x72>
 800338c:	6863      	ldr	r3, [r4, #4]
 800338e:	42a2      	cmp	r2, r4
 8003390:	bf0c      	ite	eq
 8003392:	600b      	streq	r3, [r1, #0]
 8003394:	6053      	strne	r3, [r2, #4]
 8003396:	4630      	mov	r0, r6
 8003398:	f000 fbca 	bl	8003b30 <__malloc_unlock>
 800339c:	f104 000b 	add.w	r0, r4, #11
 80033a0:	1d23      	adds	r3, r4, #4
 80033a2:	f020 0007 	bic.w	r0, r0, #7
 80033a6:	1ac2      	subs	r2, r0, r3
 80033a8:	d0cc      	beq.n	8003344 <_malloc_r+0x20>
 80033aa:	1a1b      	subs	r3, r3, r0
 80033ac:	50a3      	str	r3, [r4, r2]
 80033ae:	e7c9      	b.n	8003344 <_malloc_r+0x20>
 80033b0:	4622      	mov	r2, r4
 80033b2:	6864      	ldr	r4, [r4, #4]
 80033b4:	e7cc      	b.n	8003350 <_malloc_r+0x2c>
 80033b6:	1cc4      	adds	r4, r0, #3
 80033b8:	f024 0403 	bic.w	r4, r4, #3
 80033bc:	42a0      	cmp	r0, r4
 80033be:	d0e3      	beq.n	8003388 <_malloc_r+0x64>
 80033c0:	1a21      	subs	r1, r4, r0
 80033c2:	4630      	mov	r0, r6
 80033c4:	f000 faf6 	bl	80039b4 <_sbrk_r>
 80033c8:	3001      	adds	r0, #1
 80033ca:	d1dd      	bne.n	8003388 <_malloc_r+0x64>
 80033cc:	e7cf      	b.n	800336e <_malloc_r+0x4a>
 80033ce:	bf00      	nop
 80033d0:	20000094 	.word	0x20000094
 80033d4:	20000098 	.word	0x20000098

080033d8 <__sfputc_r>:
 80033d8:	6893      	ldr	r3, [r2, #8]
 80033da:	b410      	push	{r4}
 80033dc:	3b01      	subs	r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	6093      	str	r3, [r2, #8]
 80033e2:	da07      	bge.n	80033f4 <__sfputc_r+0x1c>
 80033e4:	6994      	ldr	r4, [r2, #24]
 80033e6:	42a3      	cmp	r3, r4
 80033e8:	db01      	blt.n	80033ee <__sfputc_r+0x16>
 80033ea:	290a      	cmp	r1, #10
 80033ec:	d102      	bne.n	80033f4 <__sfputc_r+0x1c>
 80033ee:	bc10      	pop	{r4}
 80033f0:	f7ff bc6e 	b.w	8002cd0 <__swbuf_r>
 80033f4:	6813      	ldr	r3, [r2, #0]
 80033f6:	1c58      	adds	r0, r3, #1
 80033f8:	6010      	str	r0, [r2, #0]
 80033fa:	7019      	strb	r1, [r3, #0]
 80033fc:	4608      	mov	r0, r1
 80033fe:	bc10      	pop	{r4}
 8003400:	4770      	bx	lr

08003402 <__sfputs_r>:
 8003402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003404:	4606      	mov	r6, r0
 8003406:	460f      	mov	r7, r1
 8003408:	4614      	mov	r4, r2
 800340a:	18d5      	adds	r5, r2, r3
 800340c:	42ac      	cmp	r4, r5
 800340e:	d101      	bne.n	8003414 <__sfputs_r+0x12>
 8003410:	2000      	movs	r0, #0
 8003412:	e007      	b.n	8003424 <__sfputs_r+0x22>
 8003414:	463a      	mov	r2, r7
 8003416:	4630      	mov	r0, r6
 8003418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800341c:	f7ff ffdc 	bl	80033d8 <__sfputc_r>
 8003420:	1c43      	adds	r3, r0, #1
 8003422:	d1f3      	bne.n	800340c <__sfputs_r+0xa>
 8003424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003428 <_vfiprintf_r>:
 8003428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800342c:	460d      	mov	r5, r1
 800342e:	4614      	mov	r4, r2
 8003430:	4698      	mov	r8, r3
 8003432:	4606      	mov	r6, r0
 8003434:	b09d      	sub	sp, #116	; 0x74
 8003436:	b118      	cbz	r0, 8003440 <_vfiprintf_r+0x18>
 8003438:	6983      	ldr	r3, [r0, #24]
 800343a:	b90b      	cbnz	r3, 8003440 <_vfiprintf_r+0x18>
 800343c:	f7ff fe22 	bl	8003084 <__sinit>
 8003440:	4b89      	ldr	r3, [pc, #548]	; (8003668 <_vfiprintf_r+0x240>)
 8003442:	429d      	cmp	r5, r3
 8003444:	d11b      	bne.n	800347e <_vfiprintf_r+0x56>
 8003446:	6875      	ldr	r5, [r6, #4]
 8003448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800344a:	07d9      	lsls	r1, r3, #31
 800344c:	d405      	bmi.n	800345a <_vfiprintf_r+0x32>
 800344e:	89ab      	ldrh	r3, [r5, #12]
 8003450:	059a      	lsls	r2, r3, #22
 8003452:	d402      	bmi.n	800345a <_vfiprintf_r+0x32>
 8003454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003456:	f7ff feb3 	bl	80031c0 <__retarget_lock_acquire_recursive>
 800345a:	89ab      	ldrh	r3, [r5, #12]
 800345c:	071b      	lsls	r3, r3, #28
 800345e:	d501      	bpl.n	8003464 <_vfiprintf_r+0x3c>
 8003460:	692b      	ldr	r3, [r5, #16]
 8003462:	b9eb      	cbnz	r3, 80034a0 <_vfiprintf_r+0x78>
 8003464:	4629      	mov	r1, r5
 8003466:	4630      	mov	r0, r6
 8003468:	f7ff fc84 	bl	8002d74 <__swsetup_r>
 800346c:	b1c0      	cbz	r0, 80034a0 <_vfiprintf_r+0x78>
 800346e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003470:	07dc      	lsls	r4, r3, #31
 8003472:	d50e      	bpl.n	8003492 <_vfiprintf_r+0x6a>
 8003474:	f04f 30ff 	mov.w	r0, #4294967295
 8003478:	b01d      	add	sp, #116	; 0x74
 800347a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800347e:	4b7b      	ldr	r3, [pc, #492]	; (800366c <_vfiprintf_r+0x244>)
 8003480:	429d      	cmp	r5, r3
 8003482:	d101      	bne.n	8003488 <_vfiprintf_r+0x60>
 8003484:	68b5      	ldr	r5, [r6, #8]
 8003486:	e7df      	b.n	8003448 <_vfiprintf_r+0x20>
 8003488:	4b79      	ldr	r3, [pc, #484]	; (8003670 <_vfiprintf_r+0x248>)
 800348a:	429d      	cmp	r5, r3
 800348c:	bf08      	it	eq
 800348e:	68f5      	ldreq	r5, [r6, #12]
 8003490:	e7da      	b.n	8003448 <_vfiprintf_r+0x20>
 8003492:	89ab      	ldrh	r3, [r5, #12]
 8003494:	0598      	lsls	r0, r3, #22
 8003496:	d4ed      	bmi.n	8003474 <_vfiprintf_r+0x4c>
 8003498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800349a:	f7ff fe92 	bl	80031c2 <__retarget_lock_release_recursive>
 800349e:	e7e9      	b.n	8003474 <_vfiprintf_r+0x4c>
 80034a0:	2300      	movs	r3, #0
 80034a2:	9309      	str	r3, [sp, #36]	; 0x24
 80034a4:	2320      	movs	r3, #32
 80034a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034aa:	2330      	movs	r3, #48	; 0x30
 80034ac:	f04f 0901 	mov.w	r9, #1
 80034b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80034b4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003674 <_vfiprintf_r+0x24c>
 80034b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034bc:	4623      	mov	r3, r4
 80034be:	469a      	mov	sl, r3
 80034c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034c4:	b10a      	cbz	r2, 80034ca <_vfiprintf_r+0xa2>
 80034c6:	2a25      	cmp	r2, #37	; 0x25
 80034c8:	d1f9      	bne.n	80034be <_vfiprintf_r+0x96>
 80034ca:	ebba 0b04 	subs.w	fp, sl, r4
 80034ce:	d00b      	beq.n	80034e8 <_vfiprintf_r+0xc0>
 80034d0:	465b      	mov	r3, fp
 80034d2:	4622      	mov	r2, r4
 80034d4:	4629      	mov	r1, r5
 80034d6:	4630      	mov	r0, r6
 80034d8:	f7ff ff93 	bl	8003402 <__sfputs_r>
 80034dc:	3001      	adds	r0, #1
 80034de:	f000 80aa 	beq.w	8003636 <_vfiprintf_r+0x20e>
 80034e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034e4:	445a      	add	r2, fp
 80034e6:	9209      	str	r2, [sp, #36]	; 0x24
 80034e8:	f89a 3000 	ldrb.w	r3, [sl]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80a2 	beq.w	8003636 <_vfiprintf_r+0x20e>
 80034f2:	2300      	movs	r3, #0
 80034f4:	f04f 32ff 	mov.w	r2, #4294967295
 80034f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034fc:	f10a 0a01 	add.w	sl, sl, #1
 8003500:	9304      	str	r3, [sp, #16]
 8003502:	9307      	str	r3, [sp, #28]
 8003504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003508:	931a      	str	r3, [sp, #104]	; 0x68
 800350a:	4654      	mov	r4, sl
 800350c:	2205      	movs	r2, #5
 800350e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003512:	4858      	ldr	r0, [pc, #352]	; (8003674 <_vfiprintf_r+0x24c>)
 8003514:	f000 faf8 	bl	8003b08 <memchr>
 8003518:	9a04      	ldr	r2, [sp, #16]
 800351a:	b9d8      	cbnz	r0, 8003554 <_vfiprintf_r+0x12c>
 800351c:	06d1      	lsls	r1, r2, #27
 800351e:	bf44      	itt	mi
 8003520:	2320      	movmi	r3, #32
 8003522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003526:	0713      	lsls	r3, r2, #28
 8003528:	bf44      	itt	mi
 800352a:	232b      	movmi	r3, #43	; 0x2b
 800352c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003530:	f89a 3000 	ldrb.w	r3, [sl]
 8003534:	2b2a      	cmp	r3, #42	; 0x2a
 8003536:	d015      	beq.n	8003564 <_vfiprintf_r+0x13c>
 8003538:	4654      	mov	r4, sl
 800353a:	2000      	movs	r0, #0
 800353c:	f04f 0c0a 	mov.w	ip, #10
 8003540:	9a07      	ldr	r2, [sp, #28]
 8003542:	4621      	mov	r1, r4
 8003544:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003548:	3b30      	subs	r3, #48	; 0x30
 800354a:	2b09      	cmp	r3, #9
 800354c:	d94e      	bls.n	80035ec <_vfiprintf_r+0x1c4>
 800354e:	b1b0      	cbz	r0, 800357e <_vfiprintf_r+0x156>
 8003550:	9207      	str	r2, [sp, #28]
 8003552:	e014      	b.n	800357e <_vfiprintf_r+0x156>
 8003554:	eba0 0308 	sub.w	r3, r0, r8
 8003558:	fa09 f303 	lsl.w	r3, r9, r3
 800355c:	4313      	orrs	r3, r2
 800355e:	46a2      	mov	sl, r4
 8003560:	9304      	str	r3, [sp, #16]
 8003562:	e7d2      	b.n	800350a <_vfiprintf_r+0xe2>
 8003564:	9b03      	ldr	r3, [sp, #12]
 8003566:	1d19      	adds	r1, r3, #4
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	9103      	str	r1, [sp, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	bfbb      	ittet	lt
 8003570:	425b      	neglt	r3, r3
 8003572:	f042 0202 	orrlt.w	r2, r2, #2
 8003576:	9307      	strge	r3, [sp, #28]
 8003578:	9307      	strlt	r3, [sp, #28]
 800357a:	bfb8      	it	lt
 800357c:	9204      	strlt	r2, [sp, #16]
 800357e:	7823      	ldrb	r3, [r4, #0]
 8003580:	2b2e      	cmp	r3, #46	; 0x2e
 8003582:	d10c      	bne.n	800359e <_vfiprintf_r+0x176>
 8003584:	7863      	ldrb	r3, [r4, #1]
 8003586:	2b2a      	cmp	r3, #42	; 0x2a
 8003588:	d135      	bne.n	80035f6 <_vfiprintf_r+0x1ce>
 800358a:	9b03      	ldr	r3, [sp, #12]
 800358c:	3402      	adds	r4, #2
 800358e:	1d1a      	adds	r2, r3, #4
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	9203      	str	r2, [sp, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	bfb8      	it	lt
 8003598:	f04f 33ff 	movlt.w	r3, #4294967295
 800359c:	9305      	str	r3, [sp, #20]
 800359e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003684 <_vfiprintf_r+0x25c>
 80035a2:	2203      	movs	r2, #3
 80035a4:	4650      	mov	r0, sl
 80035a6:	7821      	ldrb	r1, [r4, #0]
 80035a8:	f000 faae 	bl	8003b08 <memchr>
 80035ac:	b140      	cbz	r0, 80035c0 <_vfiprintf_r+0x198>
 80035ae:	2340      	movs	r3, #64	; 0x40
 80035b0:	eba0 000a 	sub.w	r0, r0, sl
 80035b4:	fa03 f000 	lsl.w	r0, r3, r0
 80035b8:	9b04      	ldr	r3, [sp, #16]
 80035ba:	3401      	adds	r4, #1
 80035bc:	4303      	orrs	r3, r0
 80035be:	9304      	str	r3, [sp, #16]
 80035c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035c4:	2206      	movs	r2, #6
 80035c6:	482c      	ldr	r0, [pc, #176]	; (8003678 <_vfiprintf_r+0x250>)
 80035c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035cc:	f000 fa9c 	bl	8003b08 <memchr>
 80035d0:	2800      	cmp	r0, #0
 80035d2:	d03f      	beq.n	8003654 <_vfiprintf_r+0x22c>
 80035d4:	4b29      	ldr	r3, [pc, #164]	; (800367c <_vfiprintf_r+0x254>)
 80035d6:	bb1b      	cbnz	r3, 8003620 <_vfiprintf_r+0x1f8>
 80035d8:	9b03      	ldr	r3, [sp, #12]
 80035da:	3307      	adds	r3, #7
 80035dc:	f023 0307 	bic.w	r3, r3, #7
 80035e0:	3308      	adds	r3, #8
 80035e2:	9303      	str	r3, [sp, #12]
 80035e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035e6:	443b      	add	r3, r7
 80035e8:	9309      	str	r3, [sp, #36]	; 0x24
 80035ea:	e767      	b.n	80034bc <_vfiprintf_r+0x94>
 80035ec:	460c      	mov	r4, r1
 80035ee:	2001      	movs	r0, #1
 80035f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80035f4:	e7a5      	b.n	8003542 <_vfiprintf_r+0x11a>
 80035f6:	2300      	movs	r3, #0
 80035f8:	f04f 0c0a 	mov.w	ip, #10
 80035fc:	4619      	mov	r1, r3
 80035fe:	3401      	adds	r4, #1
 8003600:	9305      	str	r3, [sp, #20]
 8003602:	4620      	mov	r0, r4
 8003604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003608:	3a30      	subs	r2, #48	; 0x30
 800360a:	2a09      	cmp	r2, #9
 800360c:	d903      	bls.n	8003616 <_vfiprintf_r+0x1ee>
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0c5      	beq.n	800359e <_vfiprintf_r+0x176>
 8003612:	9105      	str	r1, [sp, #20]
 8003614:	e7c3      	b.n	800359e <_vfiprintf_r+0x176>
 8003616:	4604      	mov	r4, r0
 8003618:	2301      	movs	r3, #1
 800361a:	fb0c 2101 	mla	r1, ip, r1, r2
 800361e:	e7f0      	b.n	8003602 <_vfiprintf_r+0x1da>
 8003620:	ab03      	add	r3, sp, #12
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	462a      	mov	r2, r5
 8003626:	4630      	mov	r0, r6
 8003628:	4b15      	ldr	r3, [pc, #84]	; (8003680 <_vfiprintf_r+0x258>)
 800362a:	a904      	add	r1, sp, #16
 800362c:	f3af 8000 	nop.w
 8003630:	4607      	mov	r7, r0
 8003632:	1c78      	adds	r0, r7, #1
 8003634:	d1d6      	bne.n	80035e4 <_vfiprintf_r+0x1bc>
 8003636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003638:	07d9      	lsls	r1, r3, #31
 800363a:	d405      	bmi.n	8003648 <_vfiprintf_r+0x220>
 800363c:	89ab      	ldrh	r3, [r5, #12]
 800363e:	059a      	lsls	r2, r3, #22
 8003640:	d402      	bmi.n	8003648 <_vfiprintf_r+0x220>
 8003642:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003644:	f7ff fdbd 	bl	80031c2 <__retarget_lock_release_recursive>
 8003648:	89ab      	ldrh	r3, [r5, #12]
 800364a:	065b      	lsls	r3, r3, #25
 800364c:	f53f af12 	bmi.w	8003474 <_vfiprintf_r+0x4c>
 8003650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003652:	e711      	b.n	8003478 <_vfiprintf_r+0x50>
 8003654:	ab03      	add	r3, sp, #12
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	462a      	mov	r2, r5
 800365a:	4630      	mov	r0, r6
 800365c:	4b08      	ldr	r3, [pc, #32]	; (8003680 <_vfiprintf_r+0x258>)
 800365e:	a904      	add	r1, sp, #16
 8003660:	f000 f882 	bl	8003768 <_printf_i>
 8003664:	e7e4      	b.n	8003630 <_vfiprintf_r+0x208>
 8003666:	bf00      	nop
 8003668:	08003ca8 	.word	0x08003ca8
 800366c:	08003cc8 	.word	0x08003cc8
 8003670:	08003c88 	.word	0x08003c88
 8003674:	08003ce8 	.word	0x08003ce8
 8003678:	08003cf2 	.word	0x08003cf2
 800367c:	00000000 	.word	0x00000000
 8003680:	08003403 	.word	0x08003403
 8003684:	08003cee 	.word	0x08003cee

08003688 <_printf_common>:
 8003688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800368c:	4616      	mov	r6, r2
 800368e:	4699      	mov	r9, r3
 8003690:	688a      	ldr	r2, [r1, #8]
 8003692:	690b      	ldr	r3, [r1, #16]
 8003694:	4607      	mov	r7, r0
 8003696:	4293      	cmp	r3, r2
 8003698:	bfb8      	it	lt
 800369a:	4613      	movlt	r3, r2
 800369c:	6033      	str	r3, [r6, #0]
 800369e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036a2:	460c      	mov	r4, r1
 80036a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036a8:	b10a      	cbz	r2, 80036ae <_printf_common+0x26>
 80036aa:	3301      	adds	r3, #1
 80036ac:	6033      	str	r3, [r6, #0]
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	0699      	lsls	r1, r3, #26
 80036b2:	bf42      	ittt	mi
 80036b4:	6833      	ldrmi	r3, [r6, #0]
 80036b6:	3302      	addmi	r3, #2
 80036b8:	6033      	strmi	r3, [r6, #0]
 80036ba:	6825      	ldr	r5, [r4, #0]
 80036bc:	f015 0506 	ands.w	r5, r5, #6
 80036c0:	d106      	bne.n	80036d0 <_printf_common+0x48>
 80036c2:	f104 0a19 	add.w	sl, r4, #25
 80036c6:	68e3      	ldr	r3, [r4, #12]
 80036c8:	6832      	ldr	r2, [r6, #0]
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	42ab      	cmp	r3, r5
 80036ce:	dc28      	bgt.n	8003722 <_printf_common+0x9a>
 80036d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036d4:	1e13      	subs	r3, r2, #0
 80036d6:	6822      	ldr	r2, [r4, #0]
 80036d8:	bf18      	it	ne
 80036da:	2301      	movne	r3, #1
 80036dc:	0692      	lsls	r2, r2, #26
 80036de:	d42d      	bmi.n	800373c <_printf_common+0xb4>
 80036e0:	4649      	mov	r1, r9
 80036e2:	4638      	mov	r0, r7
 80036e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036e8:	47c0      	blx	r8
 80036ea:	3001      	adds	r0, #1
 80036ec:	d020      	beq.n	8003730 <_printf_common+0xa8>
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	68e5      	ldr	r5, [r4, #12]
 80036f2:	f003 0306 	and.w	r3, r3, #6
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	bf18      	it	ne
 80036fa:	2500      	movne	r5, #0
 80036fc:	6832      	ldr	r2, [r6, #0]
 80036fe:	f04f 0600 	mov.w	r6, #0
 8003702:	68a3      	ldr	r3, [r4, #8]
 8003704:	bf08      	it	eq
 8003706:	1aad      	subeq	r5, r5, r2
 8003708:	6922      	ldr	r2, [r4, #16]
 800370a:	bf08      	it	eq
 800370c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003710:	4293      	cmp	r3, r2
 8003712:	bfc4      	itt	gt
 8003714:	1a9b      	subgt	r3, r3, r2
 8003716:	18ed      	addgt	r5, r5, r3
 8003718:	341a      	adds	r4, #26
 800371a:	42b5      	cmp	r5, r6
 800371c:	d11a      	bne.n	8003754 <_printf_common+0xcc>
 800371e:	2000      	movs	r0, #0
 8003720:	e008      	b.n	8003734 <_printf_common+0xac>
 8003722:	2301      	movs	r3, #1
 8003724:	4652      	mov	r2, sl
 8003726:	4649      	mov	r1, r9
 8003728:	4638      	mov	r0, r7
 800372a:	47c0      	blx	r8
 800372c:	3001      	adds	r0, #1
 800372e:	d103      	bne.n	8003738 <_printf_common+0xb0>
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003738:	3501      	adds	r5, #1
 800373a:	e7c4      	b.n	80036c6 <_printf_common+0x3e>
 800373c:	2030      	movs	r0, #48	; 0x30
 800373e:	18e1      	adds	r1, r4, r3
 8003740:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800374a:	4422      	add	r2, r4
 800374c:	3302      	adds	r3, #2
 800374e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003752:	e7c5      	b.n	80036e0 <_printf_common+0x58>
 8003754:	2301      	movs	r3, #1
 8003756:	4622      	mov	r2, r4
 8003758:	4649      	mov	r1, r9
 800375a:	4638      	mov	r0, r7
 800375c:	47c0      	blx	r8
 800375e:	3001      	adds	r0, #1
 8003760:	d0e6      	beq.n	8003730 <_printf_common+0xa8>
 8003762:	3601      	adds	r6, #1
 8003764:	e7d9      	b.n	800371a <_printf_common+0x92>
	...

08003768 <_printf_i>:
 8003768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800376c:	460c      	mov	r4, r1
 800376e:	7e27      	ldrb	r7, [r4, #24]
 8003770:	4691      	mov	r9, r2
 8003772:	2f78      	cmp	r7, #120	; 0x78
 8003774:	4680      	mov	r8, r0
 8003776:	469a      	mov	sl, r3
 8003778:	990c      	ldr	r1, [sp, #48]	; 0x30
 800377a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800377e:	d807      	bhi.n	8003790 <_printf_i+0x28>
 8003780:	2f62      	cmp	r7, #98	; 0x62
 8003782:	d80a      	bhi.n	800379a <_printf_i+0x32>
 8003784:	2f00      	cmp	r7, #0
 8003786:	f000 80d9 	beq.w	800393c <_printf_i+0x1d4>
 800378a:	2f58      	cmp	r7, #88	; 0x58
 800378c:	f000 80a4 	beq.w	80038d8 <_printf_i+0x170>
 8003790:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003794:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003798:	e03a      	b.n	8003810 <_printf_i+0xa8>
 800379a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800379e:	2b15      	cmp	r3, #21
 80037a0:	d8f6      	bhi.n	8003790 <_printf_i+0x28>
 80037a2:	a001      	add	r0, pc, #4	; (adr r0, 80037a8 <_printf_i+0x40>)
 80037a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80037a8:	08003801 	.word	0x08003801
 80037ac:	08003815 	.word	0x08003815
 80037b0:	08003791 	.word	0x08003791
 80037b4:	08003791 	.word	0x08003791
 80037b8:	08003791 	.word	0x08003791
 80037bc:	08003791 	.word	0x08003791
 80037c0:	08003815 	.word	0x08003815
 80037c4:	08003791 	.word	0x08003791
 80037c8:	08003791 	.word	0x08003791
 80037cc:	08003791 	.word	0x08003791
 80037d0:	08003791 	.word	0x08003791
 80037d4:	08003923 	.word	0x08003923
 80037d8:	08003845 	.word	0x08003845
 80037dc:	08003905 	.word	0x08003905
 80037e0:	08003791 	.word	0x08003791
 80037e4:	08003791 	.word	0x08003791
 80037e8:	08003945 	.word	0x08003945
 80037ec:	08003791 	.word	0x08003791
 80037f0:	08003845 	.word	0x08003845
 80037f4:	08003791 	.word	0x08003791
 80037f8:	08003791 	.word	0x08003791
 80037fc:	0800390d 	.word	0x0800390d
 8003800:	680b      	ldr	r3, [r1, #0]
 8003802:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003806:	1d1a      	adds	r2, r3, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	600a      	str	r2, [r1, #0]
 800380c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003810:	2301      	movs	r3, #1
 8003812:	e0a4      	b.n	800395e <_printf_i+0x1f6>
 8003814:	6825      	ldr	r5, [r4, #0]
 8003816:	6808      	ldr	r0, [r1, #0]
 8003818:	062e      	lsls	r6, r5, #24
 800381a:	f100 0304 	add.w	r3, r0, #4
 800381e:	d50a      	bpl.n	8003836 <_printf_i+0xce>
 8003820:	6805      	ldr	r5, [r0, #0]
 8003822:	600b      	str	r3, [r1, #0]
 8003824:	2d00      	cmp	r5, #0
 8003826:	da03      	bge.n	8003830 <_printf_i+0xc8>
 8003828:	232d      	movs	r3, #45	; 0x2d
 800382a:	426d      	negs	r5, r5
 800382c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003830:	230a      	movs	r3, #10
 8003832:	485e      	ldr	r0, [pc, #376]	; (80039ac <_printf_i+0x244>)
 8003834:	e019      	b.n	800386a <_printf_i+0x102>
 8003836:	f015 0f40 	tst.w	r5, #64	; 0x40
 800383a:	6805      	ldr	r5, [r0, #0]
 800383c:	600b      	str	r3, [r1, #0]
 800383e:	bf18      	it	ne
 8003840:	b22d      	sxthne	r5, r5
 8003842:	e7ef      	b.n	8003824 <_printf_i+0xbc>
 8003844:	680b      	ldr	r3, [r1, #0]
 8003846:	6825      	ldr	r5, [r4, #0]
 8003848:	1d18      	adds	r0, r3, #4
 800384a:	6008      	str	r0, [r1, #0]
 800384c:	0628      	lsls	r0, r5, #24
 800384e:	d501      	bpl.n	8003854 <_printf_i+0xec>
 8003850:	681d      	ldr	r5, [r3, #0]
 8003852:	e002      	b.n	800385a <_printf_i+0xf2>
 8003854:	0669      	lsls	r1, r5, #25
 8003856:	d5fb      	bpl.n	8003850 <_printf_i+0xe8>
 8003858:	881d      	ldrh	r5, [r3, #0]
 800385a:	2f6f      	cmp	r7, #111	; 0x6f
 800385c:	bf0c      	ite	eq
 800385e:	2308      	moveq	r3, #8
 8003860:	230a      	movne	r3, #10
 8003862:	4852      	ldr	r0, [pc, #328]	; (80039ac <_printf_i+0x244>)
 8003864:	2100      	movs	r1, #0
 8003866:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800386a:	6866      	ldr	r6, [r4, #4]
 800386c:	2e00      	cmp	r6, #0
 800386e:	bfa8      	it	ge
 8003870:	6821      	ldrge	r1, [r4, #0]
 8003872:	60a6      	str	r6, [r4, #8]
 8003874:	bfa4      	itt	ge
 8003876:	f021 0104 	bicge.w	r1, r1, #4
 800387a:	6021      	strge	r1, [r4, #0]
 800387c:	b90d      	cbnz	r5, 8003882 <_printf_i+0x11a>
 800387e:	2e00      	cmp	r6, #0
 8003880:	d04d      	beq.n	800391e <_printf_i+0x1b6>
 8003882:	4616      	mov	r6, r2
 8003884:	fbb5 f1f3 	udiv	r1, r5, r3
 8003888:	fb03 5711 	mls	r7, r3, r1, r5
 800388c:	5dc7      	ldrb	r7, [r0, r7]
 800388e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003892:	462f      	mov	r7, r5
 8003894:	42bb      	cmp	r3, r7
 8003896:	460d      	mov	r5, r1
 8003898:	d9f4      	bls.n	8003884 <_printf_i+0x11c>
 800389a:	2b08      	cmp	r3, #8
 800389c:	d10b      	bne.n	80038b6 <_printf_i+0x14e>
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	07df      	lsls	r7, r3, #31
 80038a2:	d508      	bpl.n	80038b6 <_printf_i+0x14e>
 80038a4:	6923      	ldr	r3, [r4, #16]
 80038a6:	6861      	ldr	r1, [r4, #4]
 80038a8:	4299      	cmp	r1, r3
 80038aa:	bfde      	ittt	le
 80038ac:	2330      	movle	r3, #48	; 0x30
 80038ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038b6:	1b92      	subs	r2, r2, r6
 80038b8:	6122      	str	r2, [r4, #16]
 80038ba:	464b      	mov	r3, r9
 80038bc:	4621      	mov	r1, r4
 80038be:	4640      	mov	r0, r8
 80038c0:	f8cd a000 	str.w	sl, [sp]
 80038c4:	aa03      	add	r2, sp, #12
 80038c6:	f7ff fedf 	bl	8003688 <_printf_common>
 80038ca:	3001      	adds	r0, #1
 80038cc:	d14c      	bne.n	8003968 <_printf_i+0x200>
 80038ce:	f04f 30ff 	mov.w	r0, #4294967295
 80038d2:	b004      	add	sp, #16
 80038d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d8:	4834      	ldr	r0, [pc, #208]	; (80039ac <_printf_i+0x244>)
 80038da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038de:	680e      	ldr	r6, [r1, #0]
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80038e6:	061f      	lsls	r7, r3, #24
 80038e8:	600e      	str	r6, [r1, #0]
 80038ea:	d514      	bpl.n	8003916 <_printf_i+0x1ae>
 80038ec:	07d9      	lsls	r1, r3, #31
 80038ee:	bf44      	itt	mi
 80038f0:	f043 0320 	orrmi.w	r3, r3, #32
 80038f4:	6023      	strmi	r3, [r4, #0]
 80038f6:	b91d      	cbnz	r5, 8003900 <_printf_i+0x198>
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	f023 0320 	bic.w	r3, r3, #32
 80038fe:	6023      	str	r3, [r4, #0]
 8003900:	2310      	movs	r3, #16
 8003902:	e7af      	b.n	8003864 <_printf_i+0xfc>
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	f043 0320 	orr.w	r3, r3, #32
 800390a:	6023      	str	r3, [r4, #0]
 800390c:	2378      	movs	r3, #120	; 0x78
 800390e:	4828      	ldr	r0, [pc, #160]	; (80039b0 <_printf_i+0x248>)
 8003910:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003914:	e7e3      	b.n	80038de <_printf_i+0x176>
 8003916:	065e      	lsls	r6, r3, #25
 8003918:	bf48      	it	mi
 800391a:	b2ad      	uxthmi	r5, r5
 800391c:	e7e6      	b.n	80038ec <_printf_i+0x184>
 800391e:	4616      	mov	r6, r2
 8003920:	e7bb      	b.n	800389a <_printf_i+0x132>
 8003922:	680b      	ldr	r3, [r1, #0]
 8003924:	6826      	ldr	r6, [r4, #0]
 8003926:	1d1d      	adds	r5, r3, #4
 8003928:	6960      	ldr	r0, [r4, #20]
 800392a:	600d      	str	r5, [r1, #0]
 800392c:	0635      	lsls	r5, r6, #24
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	d501      	bpl.n	8003936 <_printf_i+0x1ce>
 8003932:	6018      	str	r0, [r3, #0]
 8003934:	e002      	b.n	800393c <_printf_i+0x1d4>
 8003936:	0671      	lsls	r1, r6, #25
 8003938:	d5fb      	bpl.n	8003932 <_printf_i+0x1ca>
 800393a:	8018      	strh	r0, [r3, #0]
 800393c:	2300      	movs	r3, #0
 800393e:	4616      	mov	r6, r2
 8003940:	6123      	str	r3, [r4, #16]
 8003942:	e7ba      	b.n	80038ba <_printf_i+0x152>
 8003944:	680b      	ldr	r3, [r1, #0]
 8003946:	1d1a      	adds	r2, r3, #4
 8003948:	600a      	str	r2, [r1, #0]
 800394a:	681e      	ldr	r6, [r3, #0]
 800394c:	2100      	movs	r1, #0
 800394e:	4630      	mov	r0, r6
 8003950:	6862      	ldr	r2, [r4, #4]
 8003952:	f000 f8d9 	bl	8003b08 <memchr>
 8003956:	b108      	cbz	r0, 800395c <_printf_i+0x1f4>
 8003958:	1b80      	subs	r0, r0, r6
 800395a:	6060      	str	r0, [r4, #4]
 800395c:	6863      	ldr	r3, [r4, #4]
 800395e:	6123      	str	r3, [r4, #16]
 8003960:	2300      	movs	r3, #0
 8003962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003966:	e7a8      	b.n	80038ba <_printf_i+0x152>
 8003968:	4632      	mov	r2, r6
 800396a:	4649      	mov	r1, r9
 800396c:	4640      	mov	r0, r8
 800396e:	6923      	ldr	r3, [r4, #16]
 8003970:	47d0      	blx	sl
 8003972:	3001      	adds	r0, #1
 8003974:	d0ab      	beq.n	80038ce <_printf_i+0x166>
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	079b      	lsls	r3, r3, #30
 800397a:	d413      	bmi.n	80039a4 <_printf_i+0x23c>
 800397c:	68e0      	ldr	r0, [r4, #12]
 800397e:	9b03      	ldr	r3, [sp, #12]
 8003980:	4298      	cmp	r0, r3
 8003982:	bfb8      	it	lt
 8003984:	4618      	movlt	r0, r3
 8003986:	e7a4      	b.n	80038d2 <_printf_i+0x16a>
 8003988:	2301      	movs	r3, #1
 800398a:	4632      	mov	r2, r6
 800398c:	4649      	mov	r1, r9
 800398e:	4640      	mov	r0, r8
 8003990:	47d0      	blx	sl
 8003992:	3001      	adds	r0, #1
 8003994:	d09b      	beq.n	80038ce <_printf_i+0x166>
 8003996:	3501      	adds	r5, #1
 8003998:	68e3      	ldr	r3, [r4, #12]
 800399a:	9903      	ldr	r1, [sp, #12]
 800399c:	1a5b      	subs	r3, r3, r1
 800399e:	42ab      	cmp	r3, r5
 80039a0:	dcf2      	bgt.n	8003988 <_printf_i+0x220>
 80039a2:	e7eb      	b.n	800397c <_printf_i+0x214>
 80039a4:	2500      	movs	r5, #0
 80039a6:	f104 0619 	add.w	r6, r4, #25
 80039aa:	e7f5      	b.n	8003998 <_printf_i+0x230>
 80039ac:	08003cf9 	.word	0x08003cf9
 80039b0:	08003d0a 	.word	0x08003d0a

080039b4 <_sbrk_r>:
 80039b4:	b538      	push	{r3, r4, r5, lr}
 80039b6:	2300      	movs	r3, #0
 80039b8:	4d05      	ldr	r5, [pc, #20]	; (80039d0 <_sbrk_r+0x1c>)
 80039ba:	4604      	mov	r4, r0
 80039bc:	4608      	mov	r0, r1
 80039be:	602b      	str	r3, [r5, #0]
 80039c0:	f7fd f868 	bl	8000a94 <_sbrk>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	d102      	bne.n	80039ce <_sbrk_r+0x1a>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	b103      	cbz	r3, 80039ce <_sbrk_r+0x1a>
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	2000018c 	.word	0x2000018c

080039d4 <__sread>:
 80039d4:	b510      	push	{r4, lr}
 80039d6:	460c      	mov	r4, r1
 80039d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039dc:	f000 f8ae 	bl	8003b3c <_read_r>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	bfab      	itete	ge
 80039e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039e6:	89a3      	ldrhlt	r3, [r4, #12]
 80039e8:	181b      	addge	r3, r3, r0
 80039ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039ee:	bfac      	ite	ge
 80039f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80039f2:	81a3      	strhlt	r3, [r4, #12]
 80039f4:	bd10      	pop	{r4, pc}

080039f6 <__swrite>:
 80039f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039fa:	461f      	mov	r7, r3
 80039fc:	898b      	ldrh	r3, [r1, #12]
 80039fe:	4605      	mov	r5, r0
 8003a00:	05db      	lsls	r3, r3, #23
 8003a02:	460c      	mov	r4, r1
 8003a04:	4616      	mov	r6, r2
 8003a06:	d505      	bpl.n	8003a14 <__swrite+0x1e>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a10:	f000 f868 	bl	8003ae4 <_lseek_r>
 8003a14:	89a3      	ldrh	r3, [r4, #12]
 8003a16:	4632      	mov	r2, r6
 8003a18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a1c:	81a3      	strh	r3, [r4, #12]
 8003a1e:	4628      	mov	r0, r5
 8003a20:	463b      	mov	r3, r7
 8003a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a2a:	f000 b817 	b.w	8003a5c <_write_r>

08003a2e <__sseek>:
 8003a2e:	b510      	push	{r4, lr}
 8003a30:	460c      	mov	r4, r1
 8003a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a36:	f000 f855 	bl	8003ae4 <_lseek_r>
 8003a3a:	1c43      	adds	r3, r0, #1
 8003a3c:	89a3      	ldrh	r3, [r4, #12]
 8003a3e:	bf15      	itete	ne
 8003a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a4a:	81a3      	strheq	r3, [r4, #12]
 8003a4c:	bf18      	it	ne
 8003a4e:	81a3      	strhne	r3, [r4, #12]
 8003a50:	bd10      	pop	{r4, pc}

08003a52 <__sclose>:
 8003a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a56:	f000 b813 	b.w	8003a80 <_close_r>
	...

08003a5c <_write_r>:
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	4604      	mov	r4, r0
 8003a60:	4608      	mov	r0, r1
 8003a62:	4611      	mov	r1, r2
 8003a64:	2200      	movs	r2, #0
 8003a66:	4d05      	ldr	r5, [pc, #20]	; (8003a7c <_write_r+0x20>)
 8003a68:	602a      	str	r2, [r5, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f7fc ffc5 	bl	80009fa <_write>
 8003a70:	1c43      	adds	r3, r0, #1
 8003a72:	d102      	bne.n	8003a7a <_write_r+0x1e>
 8003a74:	682b      	ldr	r3, [r5, #0]
 8003a76:	b103      	cbz	r3, 8003a7a <_write_r+0x1e>
 8003a78:	6023      	str	r3, [r4, #0]
 8003a7a:	bd38      	pop	{r3, r4, r5, pc}
 8003a7c:	2000018c 	.word	0x2000018c

08003a80 <_close_r>:
 8003a80:	b538      	push	{r3, r4, r5, lr}
 8003a82:	2300      	movs	r3, #0
 8003a84:	4d05      	ldr	r5, [pc, #20]	; (8003a9c <_close_r+0x1c>)
 8003a86:	4604      	mov	r4, r0
 8003a88:	4608      	mov	r0, r1
 8003a8a:	602b      	str	r3, [r5, #0]
 8003a8c:	f7fc ffd1 	bl	8000a32 <_close>
 8003a90:	1c43      	adds	r3, r0, #1
 8003a92:	d102      	bne.n	8003a9a <_close_r+0x1a>
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	b103      	cbz	r3, 8003a9a <_close_r+0x1a>
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	bd38      	pop	{r3, r4, r5, pc}
 8003a9c:	2000018c 	.word	0x2000018c

08003aa0 <_fstat_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	4d06      	ldr	r5, [pc, #24]	; (8003ac0 <_fstat_r+0x20>)
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	4611      	mov	r1, r2
 8003aac:	602b      	str	r3, [r5, #0]
 8003aae:	f7fc ffcb 	bl	8000a48 <_fstat>
 8003ab2:	1c43      	adds	r3, r0, #1
 8003ab4:	d102      	bne.n	8003abc <_fstat_r+0x1c>
 8003ab6:	682b      	ldr	r3, [r5, #0]
 8003ab8:	b103      	cbz	r3, 8003abc <_fstat_r+0x1c>
 8003aba:	6023      	str	r3, [r4, #0]
 8003abc:	bd38      	pop	{r3, r4, r5, pc}
 8003abe:	bf00      	nop
 8003ac0:	2000018c 	.word	0x2000018c

08003ac4 <_isatty_r>:
 8003ac4:	b538      	push	{r3, r4, r5, lr}
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	4d05      	ldr	r5, [pc, #20]	; (8003ae0 <_isatty_r+0x1c>)
 8003aca:	4604      	mov	r4, r0
 8003acc:	4608      	mov	r0, r1
 8003ace:	602b      	str	r3, [r5, #0]
 8003ad0:	f7fc ffc9 	bl	8000a66 <_isatty>
 8003ad4:	1c43      	adds	r3, r0, #1
 8003ad6:	d102      	bne.n	8003ade <_isatty_r+0x1a>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	b103      	cbz	r3, 8003ade <_isatty_r+0x1a>
 8003adc:	6023      	str	r3, [r4, #0]
 8003ade:	bd38      	pop	{r3, r4, r5, pc}
 8003ae0:	2000018c 	.word	0x2000018c

08003ae4 <_lseek_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	4608      	mov	r0, r1
 8003aea:	4611      	mov	r1, r2
 8003aec:	2200      	movs	r2, #0
 8003aee:	4d05      	ldr	r5, [pc, #20]	; (8003b04 <_lseek_r+0x20>)
 8003af0:	602a      	str	r2, [r5, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	f7fc ffc1 	bl	8000a7a <_lseek>
 8003af8:	1c43      	adds	r3, r0, #1
 8003afa:	d102      	bne.n	8003b02 <_lseek_r+0x1e>
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	b103      	cbz	r3, 8003b02 <_lseek_r+0x1e>
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	bd38      	pop	{r3, r4, r5, pc}
 8003b04:	2000018c 	.word	0x2000018c

08003b08 <memchr>:
 8003b08:	4603      	mov	r3, r0
 8003b0a:	b510      	push	{r4, lr}
 8003b0c:	b2c9      	uxtb	r1, r1
 8003b0e:	4402      	add	r2, r0
 8003b10:	4293      	cmp	r3, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	d101      	bne.n	8003b1a <memchr+0x12>
 8003b16:	2000      	movs	r0, #0
 8003b18:	e003      	b.n	8003b22 <memchr+0x1a>
 8003b1a:	7804      	ldrb	r4, [r0, #0]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	428c      	cmp	r4, r1
 8003b20:	d1f6      	bne.n	8003b10 <memchr+0x8>
 8003b22:	bd10      	pop	{r4, pc}

08003b24 <__malloc_lock>:
 8003b24:	4801      	ldr	r0, [pc, #4]	; (8003b2c <__malloc_lock+0x8>)
 8003b26:	f7ff bb4b 	b.w	80031c0 <__retarget_lock_acquire_recursive>
 8003b2a:	bf00      	nop
 8003b2c:	20000184 	.word	0x20000184

08003b30 <__malloc_unlock>:
 8003b30:	4801      	ldr	r0, [pc, #4]	; (8003b38 <__malloc_unlock+0x8>)
 8003b32:	f7ff bb46 	b.w	80031c2 <__retarget_lock_release_recursive>
 8003b36:	bf00      	nop
 8003b38:	20000184 	.word	0x20000184

08003b3c <_read_r>:
 8003b3c:	b538      	push	{r3, r4, r5, lr}
 8003b3e:	4604      	mov	r4, r0
 8003b40:	4608      	mov	r0, r1
 8003b42:	4611      	mov	r1, r2
 8003b44:	2200      	movs	r2, #0
 8003b46:	4d05      	ldr	r5, [pc, #20]	; (8003b5c <_read_r+0x20>)
 8003b48:	602a      	str	r2, [r5, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f7fc ff38 	bl	80009c0 <_read>
 8003b50:	1c43      	adds	r3, r0, #1
 8003b52:	d102      	bne.n	8003b5a <_read_r+0x1e>
 8003b54:	682b      	ldr	r3, [r5, #0]
 8003b56:	b103      	cbz	r3, 8003b5a <_read_r+0x1e>
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	bd38      	pop	{r3, r4, r5, pc}
 8003b5c:	2000018c 	.word	0x2000018c

08003b60 <_init>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	bf00      	nop
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr

08003b6c <_fini>:
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	bf00      	nop
 8003b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b72:	bc08      	pop	{r3}
 8003b74:	469e      	mov	lr, r3
 8003b76:	4770      	bx	lr
